[{"title":"JS notice： 語法解析器、詞彙環境、執行環境","url":"/bucky0112.github.io/2020/04/01/JavaScript%E7%9A%84%E6%80%AA%E5%A5%87%E7%89%A9%E8%AA%9E/","content":"<p>由於踩了不少 JavaScript 的雷，想說需要好好的重新認識一下，於是希望藉由 <a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a> 這個系列，能夠更增進自己的實力，順便能夠培養寫文章的習慣，那麼就開始吧！Go！Go！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"語法解析器-Syntax-Parsers\"><a href=\"#語法解析器-Syntax-Parsers\" class=\"headerlink\" title=\"語法解析器 (Syntax Parsers)\"></a>語法解析器 (Syntax Parsers)</h2><hr>\n<p>首先要先了解當電腦在執行你寫的 code，其實是看不懂你寫的文字是什麼意思，更精確地說是需要透過中間一個媒介去翻譯成電腦看得懂的東西。而這個媒介是是由人寫出來的程式就是語法解析器，又稱為編譯器（Compilers）。</p>\n<p><img src=\"https://i.imgur.com/500vRoE.png\" alt=\"給電腦執行的其實是被轉換過，讓電腦看得懂要做什麼。\"></p>\n<p><strong>那麼編譯器是怎麼運作的呢？</strong></p>\n<p>當你輸入一段文字，例如： console.log(‘Hello’)，編譯器會一個字一個字地讀，當讀完整個詞時，得到關鍵字 <code>console.log(&#39;Hello&#39;)</code>，就會轉換給電腦看得懂的指令。</p>\n<h2 id=\"詞彙環境-Lexical-Environments\"><a href=\"#詞彙環境-Lexical-Environments\" class=\"headerlink\" title=\"詞彙環境 (Lexical Environments)\"></a>詞彙環境 (Lexical Environments)</h2><hr>\n<blockquote>\n<p>程式碼在程式中實際所在的位置</p>\n</blockquote>\n<p>詞彙環境在於一些程式語言中，認為程式碼寫在哪裡是很重要的。（不是每個程式語言都這樣）因為它幫助語法解析器看你寫的程式碼，它的語法、它的單字做決定，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function greeting () &#123;</span><br><span class=\"line\">    var a &#x3D; &#39;hello world&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以語法解析器讀到 <code>var a = &#39;hello world&#39;</code> ，它就會了解說，這一段的位置是在 <code>greeting()</code> 這個 function 裡面。</p>\n<h2 id=\"執行環境-Execution-Contexts\"><a href=\"#執行環境-Execution-Contexts\" class=\"headerlink\" title=\"執行環境 (Execution Contexts)\"></a>執行環境 (Execution Contexts)</h2><hr>\n<p>一般在執行程式的時候，會有許多的詞彙環境，而執行環境會去管理哪一個要執行。</p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><hr>\n<p><a href=\"https://www.guru99.com/syntax-analysis-parsing-types.html\" target=\"_blank\" rel=\"noopener\">圖片來源</a><br><a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a></p>\n","categories":["JavaScript 的怪奇物語"],"tags":["javascript"]},{"title":"使用 Hexo 在 GitHub 部署 Blog","url":"/bucky0112.github.io/2020/03/28/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E9%83%A8%E7%BD%B2Blog/","content":"<p>本來一直不是很想用 Hexo，因為覺得很多人使用，所以有使用另一種 Hugo 來架設 Blog，但是用完一直覺得不合口味，原本打算就將就著用。</p>\n<p>剛好看到 Hexo 最多人使用的主題 - Next，感覺還不錯，真香，就來裝裝看吧！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><hr>\n<p><strong>安裝需求</strong></p>\n<p>需要安裝：</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<blockquote>\n<p>以下方式為 Mac 使用者方法，其他作業系統請詳閱<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">官網</a></p>\n</blockquote>\n<ol>\n<li>安裝 Xcode</li>\n</ol>\n<p>首先到 App Store 安裝 Xcode，安裝完成後，<br>開啟它並前往 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安裝命令列工具。</p>\n<ol start=\"2\">\n<li>安裝 node.js</li>\n</ol>\n<p>使用 NVM，或是直接用 HomeBrew 安裝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安裝 Hexo：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>完成後可以輸入指令，看看有無安裝成功，成功的話會顯示版本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>我的版本是：</p>\n<p>hexo: 4.2.0<br>hexo-cli: 3.1.0</p>\n<h2 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h2><hr>\n<p>在指定資料夾建立檔案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>完成後會建立以下資料：</p>\n<p><img src=\"https://i.imgur.com/1eucaEQ.png\" alt=\"\"></p>\n<h2 id=\"更改主題與其他設定\"><a href=\"#更改主題與其他設定\" class=\"headerlink\" title=\"更改主題與其他設定\"></a>更改主題與其他設定</h2><hr>\n<p>主題選用的是 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a>，更改步驟如下：</p>\n<ol>\n<li>把 next 這個主題 clone 下來：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>找到 /_config.yml，打開修改：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: next    &#x2F;&#x2F; 改為 next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>網站設定：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: 標題</span><br><span class=\"line\">subtitle: 副標題</span><br><span class=\"line\">description: 網站描述</span><br><span class=\"line\">keywords: 網站關鍵字</span><br><span class=\"line\">author: 作者名</span><br><span class=\"line\">language: zh-TW</span><br><span class=\"line\">timezone: 時區</span><br></pre></td></tr></table></figure>\n\n<p>其他一些細部設定就可以自己慢慢摸索。</p>\n<p>如果要先看看網站的樣式，可以啟動本地端的 server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寫作\"><a href=\"#寫作\" class=\"headerlink\" title=\"寫作\"></a>寫作</h2><hr>\n<p>接下來，大概設定完就可以開始建立文章了。</p>\n<p>指令是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Layout 有 3 種，分別是：post、page(頁面)、draft(草稿)，</p>\n<p>假設要發一篇檔名為 Hello-World 草稿的話：<code>hexo new draft Hello-World</code></p>\n<p>如果要將 draft 發布為 post 的話，就鍵入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把網站部署到-GitHub\"><a href=\"#把網站部署到-GitHub\" class=\"headerlink\" title=\"把網站部署到 GitHub\"></a>把網站部署到 GitHub</h2><hr>\n<p>既然都做的差不多了，就可以開始把網站部署到 GitHub Pages。</p>\n<ol>\n<li><p>新增名為 <code>&lt;username&gt;.github.io</code> 的 repo，例如：<code>bucky0112.github.io</code></p>\n</li>\n<li><p>安裝 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a> 這個插件：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改 /_config.yml：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">url: https:&#x2F;&#x2F;username.github.io</span><br><span class=\"line\">root: &#x2F;repo.github.io&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt; #新增repo的網址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>上傳網站，執行：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>接著需要等待一些時間，讓子彈飛一會，就可以去你的網站看看成果了。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;username.github.io&#x2F;repo.github.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-常用指令\"><a href=\"#Hexo-常用指令\" class=\"headerlink\" title=\"Hexo 常用指令\"></a>Hexo 常用指令</h2><hr>\n<p>以下是之後再使用 Hexo 發佈文章時常用的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate      #產生靜態檔案 &#x2F; hexo g</span><br><span class=\"line\">$ hexo deploy        #部署網站 </span><br><span class=\"line\">$ hexo server        #啟動本地端伺服器 &#x2F; hexo s</span><br><span class=\"line\">$ hexo new &lt;post&gt;    #新增文章</span><br><span class=\"line\">$ hexo clean         #清除快取檔案和已產生的靜態檔案</span><br></pre></td></tr></table></figure>","categories":["Hexo"],"tags":["hexo","next"]},{"title":"Think first, code later","url":"/bucky0112.github.io/2020/04/03/%E5%85%88%E5%88%A5%E6%80%A5%E8%91%97%E5%AF%ABleetcode%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/","content":"<p>以前看過一篇文章，是用拉麵店販賣機講解關於 api 的概念，我覺得作者很厲害，可以用淺顯易懂的方式讓當時還是前端麻瓜的我看得懂，那篇文章很推薦新手去看 -&gt; <a href=\"https://medium.com/@hulitw/ramen-and-api-6238437dc544\" target=\"_blank\" rel=\"noopener\">從拉麵店的販賣機理解什麼是 API</a></p>\n<p>最近作者開了一系列的課 -&gt; <a href=\"https://lidemy.com/p/alg101-leetcode\" target=\"_blank\" rel=\"noopener\">先別急著寫 leetcode</a>。因為我不是本科系出身，所以確實在解題時很容易遇上困難，不然就是會想很久。剛好看到這個課程就覺得蠻需要培養如何寫程式的思維，而且重點是免費喔！免費喔！免費喔！（很重要要說 3 次）所以這個系列會記載一些對我有幫助的筆記，希望能讓自己更進步一些。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"會寫程式的人與初學者差別在哪？\"><a href=\"#會寫程式的人與初學者差別在哪？\" class=\"headerlink\" title=\"會寫程式的人與初學者差別在哪？\"></a>會寫程式的人與初學者差別在哪？</h2><hr>\n<h3 id=\"會寫程式的人\"><a href=\"#會寫程式的人\" class=\"headerlink\" title=\"會寫程式的人\"></a>會寫程式的人</h3><ol>\n<li>先想解法</li>\n<li>如果是有做過或是簡單的，就會直接構思出方法</li>\n<li>如果比較困難或是複雜的問題，就把解法轉換成程式碼</li>\n</ol>\n<h3 id=\"初學者\"><a href=\"#初學者\" class=\"headerlink\" title=\"初學者\"></a>初學者</h3><ul>\n<li>邊寫邊想怎麼解</li>\n<li>試著套用自己以前學過的語法</li>\n</ul>\n<p>這個我自己蠻有感覺的，確實一開始會邊寫邊想，然後如果卡住了，就翻筆記看有什麼語法可以拿來套用，不過通常都沒什麼好下場就是了，哈。</p>\n<h2 id=\"在解題會有兩種情況\"><a href=\"#在解題會有兩種情況\" class=\"headerlink\" title=\"在解題會有兩種情況\"></a>在解題會有兩種情況</h2><hr>\n<h3 id=\"看題目覺得自己解得開\"><a href=\"#看題目覺得自己解得開\" class=\"headerlink\" title=\"看題目覺得自己解得開\"></a>看題目覺得自己解得開</h3><ul>\n<li>有效率的解開</li>\n<li>有解開但是時間花較久</li>\n<li>最後解不開</li>\n</ul>\n<h3 id=\"看題目就覺得看不懂\"><a href=\"#看題目就覺得看不懂\" class=\"headerlink\" title=\"看題目就覺得看不懂\"></a>看題目就覺得看不懂</h3><p>撇開第二種看不懂的情況，在看得懂的情形下，以我自己比較常遇到解不開的狀況是，一開始覺得應該可以怎麼做，可是最後不知道怎麼將想法轉換成程式碼，而講者推薦了一些做法。</p>\n<h2 id=\"推薦初學者寫程式的作法\"><a href=\"#推薦初學者寫程式的作法\" class=\"headerlink\" title=\"推薦初學者寫程式的作法\"></a>推薦初學者寫程式的作法</h2><hr>\n<p>首先看一道題目，然後按照以下的作法，題目是：</p>\n<p>如何印出 1-100 之間的偶數？</p>\n<h3 id=\"想一下解法，不寫任何程式碼\"><a href=\"#想一下解法，不寫任何程式碼\" class=\"headerlink\" title=\"想一下解法，不寫任何程式碼\"></a>想一下解法，不寫任何程式碼</h3><p>先不要急著想寫 code，想如何一步一步解決的方法。</p>\n<ol>\n<li>如何印出 1-100</li>\n<li>如何判斷偶數</li>\n</ol>\n<h3 id=\"把解法寫成-pseudo-code\"><a href=\"#把解法寫成-pseudo-code\" class=\"headerlink\" title=\"把解法寫成 pseudo code\"></a>把解法寫成 pseudo code</h3><p>虛擬碼（pseudo code）在維基百科的解釋： </p>\n<blockquote>\n<p>更類似自然語言。它是半形式化、不標準的語言。我們可以將整個演算法執行過程的結構用接近自然語言的形式（這裡可以使用任何一種作者熟悉的文字，例如中文、英文，重點是將程式的意思表達出來）描述出來。使用虛擬碼，可以幫助我們更好的表述演算法，不用拘泥於具體的實現。</p>\n</blockquote>\n<p>主要是讓自己看得懂的方法，首先要讓如何印出 1-100：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>然後題目是要印出偶數，所以把第 3 步改成判斷式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">如果 i 是偶數，印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>雖然 pseudo code 沒有一定的形式，但是可以練習寫成比較像是程式碼的 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">if i &gt; 100 then exit</span><br><span class=\"line\">if i % 2 &#x3D;&#x3D;&#x3D; 0, print i</span><br><span class=\"line\">i &#x3D; i + 1</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊還可以進一步寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (i from 1 to 100) do</span><br><span class=\"line\">\tif (i % 2 &#x3D;&#x3D;&#x3D; 0)</span><br><span class=\"line\">\tprint i</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把-pseudo-code-翻譯成程式碼\"><a href=\"#把-pseudo-code-翻譯成程式碼\" class=\"headerlink\" title=\"把 pseudo code 翻譯成程式碼\"></a>把 pseudo code 翻譯成程式碼</h3><p>到了這個步驟，如果有學過程式的話，應該就可以把程式碼寫出來，這邊使用 JavaScript 來寫，就可以印出從 1-100 的偶數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for ( let i &#x3D; 1; i &lt; 100; i ++) &#123;</span><br><span class=\"line\">\tif(i % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">\t\tconsole.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["先別急著寫 leetcode 課程心得"],"tags":["先別急著寫 leetcode"]},{"title":"JS 基礎回顧 - 變數與資料型別","url":"/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/","content":"<p>會寫這個系列，是想整理我之前的筆記，假如我哪天忘記的話，還可以讓我方便查找，順便加深自己的印象。<br>第一篇來回顧變數，看如何定義跟指定各種型別的用法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><hr>\n<p><img src=\"https://i.imgur.com/cPGhwBt.png\" alt=\"Image\"></p>\n<p><strong>變數</strong>像是一個容器，假設一個容器貼着 coca_cola 的標籤，裏面裝的是叫可樂的東西，當接觸到瓶子，就可以拿裏面的東西，裏面的東西就是可樂。<br>用 JavaScript 的語言來說就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var coca_cola &#x3D; &quot;可樂&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>var = variable 的縮寫</strong><br><strong>coca_cola = 容器的標籤（變數名稱）</strong><br><strong>可樂 = 容器裡裝的內容（值）</strong></p>\n<h2 id=\"資料型別\"><a href=\"#資料型別\" class=\"headerlink\" title=\"資料型別\"></a>資料型別</h2><hr>\n<h3 id=\"基本型別\"><a href=\"#基本型別\" class=\"headerlink\" title=\"基本型別\"></a>基本型別</h3><p>變數值的型別主要分成<strong>基本型別</strong>跟<strong>物件型別</strong>，這個部份先來討論基本型別：</p>\n<ul>\n<li>number 數字</li>\n<li>string 字串</li>\n<li>boolean 布林值</li>\n<li>undefined </li>\n<li>null</li>\n</ul>\n<p>例如：數字 7、字串 “hello”、布林值 true / false</p>\n<h4 id=\"數字、字串\"><a href=\"#數字、字串\" class=\"headerlink\" title=\"數字、字串\"></a>數字、字串</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var name &#x3D; &quot;張無忌&quot;; &#x2F;&#x2F; 字串，可用單引號或雙引號把文字包起來</span><br><span class=\"line\">var power &#x3D; 100000; &#x2F;&#x2F; 數字，不需引號</span><br></pre></td></tr></table></figure>\n\n<p>如果要檢驗型別的話，可以使用 <code>typeof</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var num &#x3D; “123”;</span><br><span class=\"line\">console.log(typeof num) &#x2F;&#x2F; 會得到 string</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布林值\"><a href=\"#布林值\" class=\"headerlink\" title=\"布林值\"></a>布林值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var n &#x3D; true;  &#x2F;&#x2F; 布林值、布林值，不需引號</span><br><span class=\"line\">console.log(n) &#x2F;&#x2F; a &#x3D; true，所以結果是 true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"undefined-跟-null\"><a href=\"#undefined-跟-null\" class=\"headerlink\" title=\"undefined 跟 null\"></a>undefined 跟 null</h4><p>而 undefined 跟 null 比較特別，看以下的例子：</p>\n<p>如果定義了一個叫做 hello 的變數，但沒有指定值，<br>這時候 hello 的值是 undefined 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var hello   &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>如果定義 world 這個變數，指定為 null，<br>這時 world 的值就是 null 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var world &#x3D; null  &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><strong>undefined = 未指定變數的內容，未定義但存在</strong><br><strong>null = 不存在</strong></p>\n<h3 id=\"如果把不同型別放在一起？\"><a href=\"#如果把不同型別放在一起？\" class=\"headerlink\" title=\"如果把不同型別放在一起？\"></a>如果把不同型別放在一起？</h3><p>同型別的值，例如數字放在一起，就會按照指示做加減乘除，但是如果不同型別放在一起會是如何？看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(1 + 1); &#x2F;&#x2F; 印出 2</span><br><span class=\"line\">console.log(1 + &quot;1&quot;); &#x2F;&#x2F; 印出 11</span><br><span class=\"line\">console.log(&quot;hello&quot; + 123); &#x2F;&#x2F; 印出 hello123</span><br><span class=\"line\">console.log(&quot;hello&quot; + true); &#x2F;&#x2F; 印出 hellotrue</span><br><span class=\"line\">console.log(123 + true); &#x2F;&#x2F; 印出 124</span><br><span class=\"line\">console.log(123 + false); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(123 + null); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(&quot;123&quot; + null); &#x2F;&#x2F; 印出 123null</span><br><span class=\"line\">console.log(123 + undefined); &#x2F;&#x2F; 印出 NaN(Not a Number)</span><br><span class=\"line\">console.log(&quot;123&quot; + undefined); &#x2F;&#x2F; 印出 123undefined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等號\"><a href=\"#等號\" class=\"headerlink\" title=\"等號\"></a>等號</h3><h4 id=\"a-1-1-是什麼情況\"><a href=\"#a-1-1-是什麼情況\" class=\"headerlink\" title=\"a + 1 = 1 是什麼情況?\"></a>a + 1 = 1 是什麼情況?</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 1;</span><br><span class=\"line\">a &#x3D; a + 1;</span><br><span class=\"line\">console.log(a);  &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<p>= 不是等號，是指定<br>a = a + 1;是 a + 1 完再指定回 a</p>\n<p>接著再看以下的情況：</p>\n<h4 id=\"等號，不一定等於『等於』\"><a href=\"#等號，不一定等於『等於』\" class=\"headerlink\" title=\"等號，不一定等於『等於』\"></a>等號，不一定等於『等於』</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var age &#x3D; 8;</span><br><span class=\"line\">if (age &#x3D; 10) &#123;</span><br><span class=\"line\">  console.log(&#39;yes&#39;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;no&#39;);</span><br><span class=\"line\">&#125;                     &#x2F;&#x2F; 結果會是 yes</span><br></pre></td></tr></table></figure>\n\n<p>等等，age 不是設定是 8 嗎？不等於 10 怎麼會是 yes 呢？<br>前面說過 = 不是等號，是指定的意思，如果是以上的情況，應該用 2 個等號或 3 個等號來做比較。</p>\n<p>2 個等號 =&gt; 比較內容物是不是一樣。<br>3 個等號 =&gt; 除了比較內容物之外，還有比較是不是資料形別，資料形別是不是一樣。<br>在 if (age = 10)中，age = 10 就是指定 age 爲 10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(1 &#x3D;&#x3D; 1);     &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D; &#39;1&#39;);   &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D;&#x3D; &#39;1&#39;);  &#x2F;&#x2F;  false</span><br></pre></td></tr></table></figure>\n\n<p>所以在判斷的時候，儘量可以的話就用三個等號會比較安全。</p>\n","categories":["JS 基礎回顧"],"tags":["javascript"]},{"title":"基礎 Vue.js(上)","url":"/bucky0112.github.io/2020/03/30/%E5%9F%BA%E7%A4%8E%20Vue.js-1/","content":"<p>身為目前 3 大前端應用框架之一的 Vue.js，截至目前為止在 GitHub 已經累積 160k 的星星數，以下是個人淺薄的學習筆記。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h2><hr>\n<p>在 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">Vue.js官網</a> 中建議在瀏覽器上安裝 <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a>，這樣可以方便在瀏覽器中觀看訊息。</p>\n<p>在 <code>&lt;script&gt;</code> 中直接載入 Vue 的檔案，在官網有提供各式檔案來源可供存取，要注意的是如果在開發環境下，建議使用開發版本，這樣會提供完整的警告訊息，方便開發者去查閱問題來源。</p>\n<h2 id=\"應用程式建立\"><a href=\"#應用程式建立\" class=\"headerlink\" title=\"應用程式建立\"></a>應用程式建立</h2><hr>\n<p>首先在 HTML 建立一個 <code>div</code> ，這邊可以使用 id 或是 class，一般建議是使用 id，</p>\n<p>接著在 <code>&lt;script&gt;</code> 中輸入建立 Vue 的起手式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然後打開瀏覽器的開發人員工具，如果有安裝  <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a> 就可以看到已經建立了一個 Root</p>\n<p><img src=\"https://i.imgur.com/01jwjmg.png\" alt=\"\"></p>\n<p>如果要建立資料的話，然後顯示在 HTML 上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 建立完data，想要顯示message的話，在 &#123;&#123; &#125;&#125; 中放入名稱就可以顯示 --&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F; 建立data，裡面可以存放資料，例如 message</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#39;Hello World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意事項： 一個頁面可以同時建立 2 個 app，但是 3 個就沒辦法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">  var app2 &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;app2&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>建立兩個是可以的，一樣會出現 2 個 Root</p>\n<p><img src=\"https://i.imgur.com/BYN501c.png\" alt=\"\"></p>\n<p>但是如果建立 3 個 app，就會出現找不到 element</p>\n<p><img src=\"https://i.imgur.com/eyWxDkg.png\" alt=\"\"></p>\n<h2 id=\"雙向綁定的資料\"><a href=\"#雙向綁定的資料\" class=\"headerlink\" title=\"雙向綁定的資料\"></a>雙向綁定的資料</h2><p>在 Vue 中，有雙向綁定的特色，</p>\n<p>前面提到如果要將資料顯示在網頁上，可以使用 <code>{{  }}</code> 這個語法，在 Vue 的語法中還有其他可以使用的：</p>\n<ul>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n</ul>\n<h3 id=\"v-model-的使用\"><a href=\"#v-model-的使用\" class=\"headerlink\" title=\"v-model 的使用\"></a>v-model 的使用</h3><p>主要是使用在：</p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上 <code>&lt;text&gt;</code> 跟 <code></code> 就會顯示一樣的內容</p>\n<p><img src=\"https://i.imgur.com/bwOOIxu.png\" alt=\"\"></p>\n<p>而當直接在畫面修改 <code>&lt;text&gt;</code> 輸入欄中的內容時，<code></code>也會一起改變。</p>\n<p><img src=\"https://i.imgur.com/NvbXPV9.png\" alt=\"\"></p>\n<h3 id=\"v-text-跟-v-html-使用的方法\"><a href=\"#v-text-跟-v-html-使用的方法\" class=\"headerlink\" title=\"v-text 跟 v-html 使用的方法\"></a>v-text 跟 v-html 使用的方法</h3><p>兩者差不多，都可以直接顯示內容，差別在 <code>v-html</code> 可以加入 html 標籤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">  &lt;div v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;&lt;h1&gt;Hello&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上的呈現是這樣：</p>\n<p><img src=\"https://i.imgur.com/Rhr0U3R.png\" alt=\"\"></p>\n","categories":["vue"],"tags":["javascript","vue"]},{"title":"基礎 Vue.js(中)","url":"/bucky0112.github.io/2020/03/30/%E5%9F%BA%E7%A4%8EVue-js-2/","content":"<p>此篇會講到關於 MVVM 的概念、綁定、for 迴圈及判斷，還有行為 on 的使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"MVVM-的概念\"><a href=\"#MVVM-的概念\" class=\"headerlink\" title=\"MVVM 的概念\"></a>MVVM 的概念</h2><hr>\n<p>首先要先提到傳統 MVC 的概念，</p>\n<p>在 Web 應用程式的劃分分為：</p>\n<ul>\n<li>模型（Model）</li>\n<li>視圖（View）</li>\n<li>控制器（Controller）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/lmb7P7R.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自 TechTerms.com</p>\n</blockquote>\n<p>使用者第一眼看到的就是 View，如果使用者想要取得某些資料，這時 View 會發送請求給 Controller，然後 Controller 會請 Model 找出資料，Model 就會另外在資料庫找出資料，Model 取得資料後，再回傳給 Controller，Controller 再呈現出畫面在 View 上。</p>\n<h3 id=\"那麼-MVVM-又是什麼概念？\"><a href=\"#那麼-MVVM-又是什麼概念？\" class=\"headerlink\" title=\"那麼 MVVM 又是什麼概念？\"></a>那麼 MVVM 又是什麼概念？</h3><p>View 跟 ViewModel 是綁定的，如果使用者想要取得資料，View 會直接請求給 Model，然後 Model 透過 Database 找到資料再回傳給 ViewModel，會直接即時顯示在 View 上。</p>\n<p><img src=\"https://i.imgur.com/hYs0zLQ.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自維基百科</p>\n</blockquote>\n<h3 id=\"所以-Vue-js-跟-一般-JavaScript-有什麼不同？\"><a href=\"#所以-Vue-js-跟-一般-JavaScript-有什麼不同？\" class=\"headerlink\" title=\"所以 Vue.js 跟 一般 JavaScript 有什麼不同？\"></a>所以 Vue.js 跟 一般 JavaScript 有什麼不同？</h3><p>一般 JavaScript 在處理畫面上是直接操作 Dom 元素</p>\n<p>而 Vue.js 是以資料狀態操作 Dom 元素時，是以資料狀態去變動。</p>\n<h2 id=\"v-bind-動態屬性指令\"><a href=\"#v-bind-動態屬性指令\" class=\"headerlink\" title=\"v-bind 動態屬性指令\"></a>v-bind 動態屬性指令</h2><hr>\n<p>上面提到 Vue.js 是以資料狀態去變動，這邊要來實際操作一下如何載入圖片：</p>\n<p><code>&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</code></p>\n<p>縮寫</p>\n<p><code>&lt;img :src=&quot;imageSrc&quot;&gt;</code></p>\n<p>以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 綁定一個屬性src --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以讓圖片顯示出來了</p>\n<iframe src=\"https://codepen.io/bucky0112/embed/KKpyXJB?height=361&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n\n<p>不過圖片似乎太大，所以還可以改小一點</p>\n<p>這邊使用 Bootstrap 的 <code>.img-fluid</code> ，讓圖片設定為響應式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 多綁定一個屬性class --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot; v-bind:class&#x3D;&quot;className&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;,</span><br><span class=\"line\">    \tclassName: &#39;img-fluid&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/wvaPPXQ?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"v-if-及-v-for\"><a href=\"#v-if-及-v-for\" class=\"headerlink\" title=\"v-if 及 v-for\"></a>v-if 及 v-for</h2><hr>\n<p>這邊的 data 中有一組陣列屬於 JSON 格式，要運用 <code>v-for</code> 讓它顯示在畫面上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    list: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;小明&quot;,</span><br><span class=\"line\">        age: 16</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;媽媽&quot;,</span><br><span class=\"line\">        age: 38</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;漂亮阿姨&quot;,</span><br><span class=\"line\">        age: 24</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這邊有一個語法 <code>&lt;pre&gt;&lt;/pre&gt;</code>，可以讓內容先在頁面上顯示出來，以方便開發者觀看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;&#x2F;pre&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要讓全部的資料使用 for 迴圈跑出來，在 Vue 的方式是用 <code>v-for</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;!-- item可以使用任意名稱 --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;item in list&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>會顯示</p>\n<ul>\n<li>小明的年齡是 16</li>\n<li>媽媽的年齡是 38</li>\n<li>漂亮阿姨的年齡是 24</li>\n</ul>\n<p>如果想要顯示每一個 <code>li</code> 在陣列中索引是第幾個</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">      &lt;!-- (陣列的值, 陣列的索引) --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 索引是從 0 開始，如果要從 1 開始顯示要記得加 1 --&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要顯示大於 24 的資料的話，可以使用判斷式 <code>v-if</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot; v-if&#x3D;&quot;item.age &gt; 24&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/BaNmJaE?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"利用-v-on-來操作行為\"><a href=\"#利用-v-on-來操作行為\" class=\"headerlink\" title=\"利用 v-on 來操作行為\"></a>利用 v-on 來操作行為</h2><hr>\n<p>在 jQuery 中，如果要操作行為的話，會使用 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(selector).on(events, function () &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而在 Vue 中，方法差不多，採用的是 <code>v-on</code>，範例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- v-on:click 可以使用縮寫成 @click --&gt;</span><br><span class=\"line\">&lt;button v-on:click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這邊做一個反轉文字的練習</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:keyup.enter，綁定鍵盤按Enter事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;reverseText&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:click綁定點擊事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 反轉文字的語法 split(&quot;&quot;).reverse().join(&quot;&quot;)</span><br><span class=\"line\">    \t\t&#x2F;&#x2F; 當點擊按鈕後啟動function，this.newText顯示內容</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重點 1：這邊控制資料要加上 “this”，像是 “this.newText”，沒有的話就不會顯示。</p>\n</blockquote>\n<blockquote>\n<p>重點 2 : 預先定義資料狀態很重要，如果 data 中的資料沒有先定義好，會發生錯誤</p>\n</blockquote>\n<iframe src=\"https://codepen.io/bucky0112/embed/abOEdRq?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>","categories":["vue"],"tags":["javascript","vue"]},{"title":"基礎 Vue.js(下)","url":"/bucky0112.github.io/2020/03/30/%E5%9F%BA%E7%A4%8EVue-js-3/","content":"<p>最後一篇 Vue 的基礎，會提到修飾符、還有 v-bind 切換 class，表單的運用，還有 component 的概念。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h2><hr>\n<p>修飾符在網頁中很常使用到，例如點擊一個 a 連結，不想讓他產生作用的話，就會使用到 <code>preventDefault()</code> 這個語法，例如 jQuery 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;Click me&lt;&#x2F;a&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  $(&quot;a&quot;).on(&quot;click&quot;, function(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣子點擊的話，連結就不會有作用。</p>\n<p>而在 Vue 中也有這個用法，阻止默認行為：</p>\n<p><code>&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 當點擊a連結，一樣可以執行function，但不會連到Google --&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; @click.prevent&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"透過-v-bind-class-來綁定-HTML\"><a href=\"#透過-v-bind-class-來綁定-HTML\" class=\"headerlink\" title=\"透過 v-bind:class 來綁定 HTML\"></a>透過 v-bind:class 來綁定 HTML</h2><hr>\n<p>可以給予 <code>v-bind:class</code> 一個 class 對象，去做出動態切換 class</p>\n<p><code>&lt;div v-bind:class=&quot;{ class名稱: 切換的動作 }&quot;&gt;&lt;/div&gt;</code></p>\n<p>看以下範例，有一個藍色的方塊，只要在 class 名稱加上 yellow，就會變成黃色：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 只要在class動態加上yellow就會變黃色 --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    height: 250px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  .box.yellow &#123;</span><br><span class=\"line\">    background-color: yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tchange: false  &#x2F;&#x2F; 這邊有一個切換動作change的data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 加上 v-bind:class&#x3D;&quot;&#123;class名稱: 切換的動作&#125;&quot; --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;&#123;&#39;yellow&#39;: change&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 在按鈕綁定click，讓它去做切換的效果 --&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot; @click&#x3D;&quot;change &#x3D; !change&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/dyoJaow?height=265&theme-id=dark&default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"計算屬性-computed-的使用\"><a href=\"#計算屬性-computed-的使用\" class=\"headerlink\" title=\"計算屬性 computed 的使用\"></a>計算屬性 computed 的使用</h2><hr>\n<p>下面的範例是當在 <code>text</code> 欄位輸入文字時，會在 <code>.showText</code> 顯示反轉文字</p>\n<p>不過</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;text.split(&quot;&quot;).reverse().join(&quot;&quot;)&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果要重複使用 <code>{{text.split(\"\").reverse().join(\"\")}}</code> 這一段的話，會有點難維護，所以可以運用 computed 來處理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    reverseText: function() &#123;  &#x2F;&#x2F; 在 computed 中要使用 function</span><br><span class=\"line\">    \treturn this.text.split(&quot;&quot;).reverse().join(&quot;&quot;); &#x2F;&#x2F; 並且會回傳值，所以就可以應用在回傳反轉後的結果</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接著只要加上回傳值的 function，就可以顯示結果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;reverseText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼 computed 跟 methods 在使用上有什麼差異呢？</p>\n<ul>\n<li>computed 一般用來回傳用於畫面呈現的資料 <strong>在監控資料更動後，重新運算後將結果呈現於畫面上。由於資料變動就會觸發，所以如果運行的資料太多，在效能處理上就會變慢。</strong></li>\n<li>methods 是運用在互動的函式，可以用來修改資料，內容因為需要觸發才會運作，所以如果資料量大的話會建議使用 methods。</li>\n</ul>\n<h2 id=\"Vue-表單與資料的綁定\"><a href=\"#Vue-表單與資料的綁定\" class=\"headerlink\" title=\"Vue 表單與資料的綁定\"></a>Vue 表單與資料的綁定</h2><hr>\n<p>前面有提到 Vue 雙向綁定用 <code>v-model</code> 的用法，這個部份來看看其他綁定的用法。</p>\n<h3 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;label for&#x3D;&quot;dinner&quot;&gt;要吃晚餐嗎？&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checkboxDinner&quot; id&#x3D;&quot;dinner&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;checkboxDinner&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  \tel: &quot;#app&quot;,</span><br><span class=\"line\">  \tdata: &#123;</span><br><span class=\"line\">  \t  checkboxDinner: false, &#x2F;&#x2F; checkbox 選項只有true或false</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 的用法這邊用在是或不是的選項 ，這邊預設是 false，當點擊時就會變成 true。</p>\n<p>還有加入 Array 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkboxArray: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這裏有綁定 3 個選項，當點擊 <code>checkbox</code> ，data 的 checkboxArray 空陣列就會填入該選項的 value，最後會顯示在 <code>&lt;span&gt;</code> 中的 <code>v-for</code> 迴圈。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;p&gt;晚餐火鍋裡有&lt;span v-for&#x3D;&quot;item in checkboxArray&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;span&gt;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 還可以另一種的運用，就是只顯示單選，例如當選擇一個選項就會將 value 綁入 singleRadio 的空字串中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    singleRadio: &quot;&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;p&gt;晚餐火鍋裡有 &#123;&#123;singleRadio&#125;&#125;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下拉式的選單\"><a href=\"#下拉式的選單\" class=\"headerlink\" title=\"下拉式的選單\"></a>下拉式的選單</h3><p>當選擇某一個選項時，會將 value 綁入 data 的 selected 空字串中，然後顯示在 <code></code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;喜歡澳洲哪一個城市？&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; class&#x3D;&quot;form-control&quot; v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;&quot; disabled&gt;-- 請選擇地點 --&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Melbourne&quot;&gt;墨爾本&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Sydney&quot;&gt;雪梨&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Adelaide&quot;&gt;阿德雷德&lt;&#x2F;option&gt;</span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\">  &#123;&#123;selected&#125;&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tselected: &quot;&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"component-元件基礎概念\"><a href=\"#component-元件基礎概念\" class=\"headerlink\" title=\"component 元件基礎概念\"></a>component 元件基礎概念</h2><hr>\n<p>以下有一個範例，當點擊按鈕時，透過 <code>v-on:click</code> 綁定 counter 的按鈕會 + 1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 當點擊按鈕時，透過 v-on:click綁定counter的按鈕會+1 --&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tcounter: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果新增另一個按鈕的話，會怎麼樣呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因為兩個是共用同一個變數 counter，所以當按其中一個按鈕，兩個會一起 + 1。</p>\n<p>那麼如果想要讓個別按鈕資料獨立的話，這邊有另一個方法可以使用：</p>\n<p><strong>component 元件</strong>，透過這樣的方式，可以讓每個 component 中的 data 都會是互相獨立，看以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Vue.component(tagName, options)</span><br><span class=\"line\">Vue.component(&#39;counter-component&#39;, &#123;</span><br><span class=\"line\">  template: &#96;&lt;div&gt;</span><br><span class=\"line\">    C目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      counter: 0 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    counter: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>tagName 可以取任意的名字，但是要注意必須是小寫，如果是多組字，就要使用 kebab Case 來命名。</p>\n<p>option 裡面有 template 跟 data，template 是要顯示在頁面上的樣板，注意要用 `` 包起來，data 在這邊則是 function 並 return 值。</p>\n<p>這樣點擊的數量就會是單獨計算，就算再新增一個 component 也一樣會分開計算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    A目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 兩者所點擊的數量是分開計算 --&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["javascript","vue"]},{"title":"JS基礎回顧 - function","url":"/bucky0112.github.io/2020/04/11/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-function/","content":"<p>在看 kuro 大神寫的 <a href=\"https://www.tenlong.com.tw/products/9789864344130\" target=\"_blank\" rel=\"noopener\">0 陷阱！0 誤解！8 天重新認識 JavaScript！</a>（不是業配，這本書很棒）中提到，JavaScript 最核心也最容易被誤用的部份非函式（function）莫屬。我一開始在學 JS 時，碰到函式就覺得非常挫折，因此目前在整理這個筆記時，希望以後可以不用再踩坑？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"函式宣告\"><a href=\"#函式宣告\" class=\"headerlink\" title=\"函式宣告\"></a>函式宣告</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sayhello() &#123;</span><br><span class=\"line\">  console.log (&#39;hi&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayhello()  &#x2F;&#x2F; 印出&#39;hi&#39;</span><br></pre></td></tr></table></figure>\n\n<p>如上面的例子可以看到，函式的宣告及呼叫的運作。</p>\n<p><img src=\"https://i.imgur.com/HRVJOZV.png\" alt=\"Image\"></p>\n<p>一個宣告函式主要會包含三個部份：</p>\n<ul>\n<li>函式的名稱（或是可能沒有名稱）。</li>\n<li>括號 () 中的部份，是參數。</li>\n<li>大括號 {} 中的部份，是主要區塊，放重複執行的內容。</li>\n</ul>\n<h3 id=\"回傳值\"><a href=\"#回傳值\" class=\"headerlink\" title=\"回傳值\"></a>回傳值</h3><p>在 function 中還可以使用 return 來取得回傳值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)     &#x2F;&#x2F; 回傳是不是 60 分</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var myTest &#x3D; 59;          </span><br><span class=\"line\"></span><br><span class=\"line\">if (isPass(myTest)) &#123;      </span><br><span class=\"line\">  console.log(&#39;及格&#39;)      &#x2F;&#x2F; 如果就印出及格</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;不及格&#39;)    &#x2F;&#x2F; 如果不是就印出不及格，最後結果是不及格</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函式\"><a href=\"#匿名函式\" class=\"headerlink\" title=\"匿名函式\"></a>匿名函式</h2><hr>\n<p>在上一個函式中的寫法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在另一種的寫法，透過<code>變數名稱 = function ([參數] {...})</code>,將一個函式透過 = 指定給某個變數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; function 後面沒有名稱</span><br><span class=\"line\">var isPass &#x3D; function (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為在變數型別中，除了基本型別以外的都是<strong>物件型別</strong>，所以可以被呼叫，自然也可以透過變數存入。</p>\n<p>也由於在這個例子中，function 後面沒有名稱，所以是<strong>匿名函式</strong>。</p>\n<p>如果要替它加上名稱也是可以，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func(score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是要注意的是，這個 func 只在<strong>自己函式範圍</strong>有效，看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof func);  &#x2F;&#x2F; 使用 typeof 可以判斷型別</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof func);</span><br></pre></td></tr></table></figure>\n\n<p>上面的結果，第一個 typeof 判斷是 function，第二個則是出現 undefined，func 一旦不在自己函式範圍內，就不存在了。</p>\n<p>不過如果想要取得這個 function 的名稱，也可以透過自定義的變數名稱，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof isPass);</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof isPass)</span><br></pre></td></tr></table></figure>\n\n<p>2 個 console.log 結果都會顯示 function。</p>\n","categories":["JS 基礎回顧"],"tags":["function","匿名函式"]}]