[{"title":"JS notice： JavaScript 與 undefined","url":"/bucky0112.github.io/2020/05/11/JSnotice-javascript-and-undefined/","content":"<p>本篇文章會稍微講解 undefined 與 not defined 的差異。</p>\n<a id=\"more\"></a>\n<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><hr>\n<p>先來看一個例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;Hello World&quot;;</span><br><span class=\"line\">console.log(a)  &#x2F;&#x2F; &quot;Hello World&quot;</span><br></pre></td></tr></table></figure>\n\n<p>當宣告一個變數 a，並指定一個值給它時，再用 <code>console.log</code> 印出 a，不意外的得到賦予它的值。</p>\n<p>但如果把值去掉，再次看 a 會得到什麼？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a)  &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>結果得到 undefined。</p>\n<h2 id=\"not-defined\"><a href=\"#not-defined\" class=\"headerlink\" title=\"not defined\"></a>not defined</h2><hr>\n<p>那麼如果把 var 跟值去掉的話，只留下 a 會發生什麼事？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>會發生錯誤，錯誤訊息為 a is not defined。<br>這邊則會有一個疑問，not defined 跟 undefined 是不同的嗎？</p>\n<p>這個部份有在 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/24/%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-%E5%89%B5%E9%80%A0%E8%88%87%E6%8F%90%E5%8D%87/\">執行環境：創造與提升</a> 提過，<strong>所有 JavaScript 的變數，在一開始都會被設定為 undefined，而 undefined 是 JavaScript 內建的一個特殊的值，表示這個值尚未被定義</strong></p>\n<p>這邊可以用判斷式來測試一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;Hello World&quot;;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;) </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果賦予 a 值的情況下，會出現 ‘a is defined’。<br>而把值去掉的話：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;) </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>則是會出現 ‘a is undefined’。</p>\n<h2 id=\"undefined-與-not-defined-差在哪？\"><a href=\"#undefined-與-not-defined-差在哪？\" class=\"headerlink\" title=\"undefined 與 not defined 差在哪？\"></a>undefined 與 not defined 差在哪？</h2><hr>\n<p>接著把 var 去掉，只留下 a，則會出現錯誤，a is not defined。<br>這是因為執行環境被創造時，沒有在記憶體中找到 a。<br>而宣告 <code>var a</code> 時，a 在創造階段就被放進記憶體中，雖然沒有賦予它值，但是確實先給它一個特殊的初始值 undefined，已經在記憶體中佔據了一席之地。</p>\n<h2 id=\"那麼可以設定值為-undefined-嗎？\"><a href=\"#那麼可以設定值為-undefined-嗎？\" class=\"headerlink\" title=\"那麼可以設定值為 undefined 嗎？\"></a>那麼可以設定值為 undefined 嗎？</h2><hr>\n<p>理論上是可以的，來測試看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; undefined;</span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">if (a &#x3D;&#x3D;&#x3D; undefined) &#123;</span><br><span class=\"line\">  console.log(&#39;a is undefined&#39;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;a is defined&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>雖然 a 給它值，可能想說會是 ‘a is defined’，但是最後的結果會是 ‘a is undefined’。<br>所以這邊就會有問題，萬一想要除錯的話，可能會發生混亂，所以這裏需要注意不要給予賦予變數 undefined 這個特殊關鍵字。</p>\n","categories":["JavaScript 的怪奇物語"],"tags":["JavaScript","undefined"]},{"title":"挑戰 Codewar - 1","url":"/bucky0112.github.io/2020/05/07/CodewarChallenge/","content":"<p>這是在胡立的程式導師實驗計畫第四期中的 <a href=\"https://github.com/bucky0112/mentor-program-4th/blob/master/codewar.md\" target=\"_blank\" rel=\"noopener\">Codewar 練習題</a>，裡面的題目都是出自 <a href=\"https://www.codewars.com/dashboard\" target=\"_blank\" rel=\"noopener\">Codewars</a>，之後會試著去由淺入深解開裡面的題目，並在這個系列寫出我解題的過程與心得。</p>\n<a id=\"more\"></a>\n<h2 id=\"Opposite-number\"><a href=\"#Opposite-number\" class=\"headerlink\" title=\"Opposite number\"></a>Opposite number</h2><hr>\n<p>第一題先從難度零顆星的開始。目的是要將數值正反顛倒，正數變負數，負數變正數。<br>一進去就給你一個 function，讓你去思考怎麼解。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F;your code here</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一開始有點想太多，想說如果是負數的話，就給它一個負號，讓它變正數；如果是正數，就給負號。</p>\n<p>所以一開始的作法我是用 <code>if...else</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  if(number &lt; 0) &#123;</span><br><span class=\"line\">    return -number</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return -number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>後來想想不對，應該是不用這麼複雜，不管什麼數，給負數就對了，所以就變成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function opposite(number) &#123;</span><br><span class=\"line\">  return -number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">opposite(10); &#x2F;&#x2F; -10</span><br><span class=\"line\">opposite(-50) &#x2F;&#x2F; 50</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Even-or-Odd\"><a href=\"#Even-or-Odd\" class=\"headerlink\" title=\"Even or Odd\"></a>Even or Odd</h2><hr>\n<p>這一題是要做出判斷給的數值是奇數或是偶數。</p>\n<p>想了一下，應該是要用判斷 <code>if...else</code> 去做，只要判斷出偶數（或是奇數），另一個就會得到結果，所以會是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if number % 2 &#x3D;&#x3D;&#x3D; 0</span><br><span class=\"line\">return even</span><br><span class=\"line\">else return odd</span><br></pre></td></tr></table></figure>\n\n<p>用 JavaScript 來操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function even_or_odd(number) &#123;</span><br><span class=\"line\">  if (number % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">    return &#39;Even&#39;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return &#39;Odd&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">even_or_odd(2); &#x2F;&#x2F; &#39;Even&#39;</span><br><span class=\"line\">even_or_odd(7)  &#x2F;&#x2F; &#39;Odd&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-Star-ladder\"><a href=\"#Number-Star-ladder\" class=\"headerlink\" title=\"Number-Star ladder\"></a>Number-Star ladder</h2><hr>\n<p>這題從零顆星開始變成一顆星頭目了，感覺有點難，範例是如果給數值 4，會依序回傳：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1*2</span><br><span class=\"line\">1**3</span><br><span class=\"line\">1***4</span><br></pre></td></tr></table></figure>\n<p>一開始題目就幫你設定好為：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function pattern(n)&#123;</span><br><span class=\"line\"> var output&#x3D;&quot;&quot;;</span><br><span class=\"line\">  &#x2F;&#x2F;being coder</span><br><span class=\"line\"> return output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這個問題卡了我一天都解不出來，只知道是組字串的作法，最後只好去看提示，後來才知道 JavaScript 有換行的語法，然後照我自己的方法做。<br><em>補充一下，在 JavaScript 中如果想要做出換行的效果，可以使用 ‘\\n’ 這個語法</em></p>\n<p>所以作法大概是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">如果是 1，就直接印 1</span><br><span class=\"line\">其他數字從 2 到 n 跑迴圈</span><br><span class=\"line\">米字(starkey) 從 1 到 n 跑迴圈</span><br><span class=\"line\">組裝字串 1 + 換行 + 1 + starkey + n</span><br></pre></td></tr></table></figure>\n\n<p>而在 JavaScript 中的作法為：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function pattern(n)&#123;</span><br><span class=\"line\">  if (n &lt;&#x3D; 1) &#123;               &#x2F;&#x2F; 如果 n 小於 1，直接回傳 n</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var output&#x3D;&quot;1&quot;;</span><br><span class=\"line\">  for (var i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class=\"line\">    var starKey &#x3D; &quot;&quot;;</span><br><span class=\"line\">    for (var s &#x3D; 1; s &lt; i; s++) &#123;</span><br><span class=\"line\">      starKey +&#x3D; &quot;*&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    output +&#x3D; &quot;\\n&quot; + 1 + starKey + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(pattern(5));</span><br><span class=\"line\">&#x2F;&#x2F; &quot;1</span><br><span class=\"line\">&#x2F;&#x2F;1*2</span><br><span class=\"line\">&#x2F;&#x2F;1**3</span><br><span class=\"line\">&#x2F;&#x2F;1***4</span><br><span class=\"line\">&#x2F;&#x2F;1****5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然後還有看到一種作法也滿好的，在 starKey 部份是改用 <code>Array().join()</code> 的方式，<br>於是就學了起來，就可以改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function pattern (n) &#123;</span><br><span class=\"line\">  if (n &lt;&#x3D; 1) &#123;</span><br><span class=\"line\">    return n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var output &#x3D; &quot;1&quot;;</span><br><span class=\"line\">  for (var i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class=\"line\">    output +&#x3D; &quot;\\n&quot; + 1 + Array(i).join(&quot;*&quot;) + i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(pattern(5));</span><br><span class=\"line\">&#x2F;&#x2F; &quot;1</span><br><span class=\"line\">&#x2F;&#x2F;1*2</span><br><span class=\"line\">&#x2F;&#x2F;1**3</span><br><span class=\"line\">&#x2F;&#x2F;1***4</span><br><span class=\"line\">&#x2F;&#x2F;1****5&quot;</span><br></pre></td></tr></table></figure>\n\n<p>這次解題過程還算蠻有趣的，雖然第 3 題有點難度，想到後面還有更難的題目就覺得可怕…</p>\n<p><img src=\"https://i.imgur.com/CQMhOEc.gif\" alt=\"\"></p>\n<p>但是解完題目後，所得到的成就感也很讓人著迷，會想要再接再厲繼續解下去，希望能透過完成這個系列精進寫程式的想法。</p>\n","categories":["挑戰 Codewar 系列"],"tags":["codewar","w3HexSchool"]},{"title":"JS notice： 語法解析器、詞彙環境、執行環境","url":"/bucky0112.github.io/2020/04/01/JSnotice%EF%BC%9A%E8%AA%9E%E6%B3%95%E8%A7%A3%E6%9E%90%E5%99%A8%E3%80%81%E8%A9%9E%E5%BD%99%E7%92%B0%E5%A2%83%E3%80%81%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83/","content":"<p>由於踩了不少 JavaScript 的雷，想說需要好好的重新認識一下，於是希望藉由 <a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a> 這個系列，能夠更增進自己的實力，順便能夠培養寫文章的習慣，那麼就開始吧！Go！Go！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"語法解析器-Syntax-Parsers\"><a href=\"#語法解析器-Syntax-Parsers\" class=\"headerlink\" title=\"語法解析器 (Syntax Parsers)\"></a>語法解析器 (Syntax Parsers)</h2><hr>\n<p>首先要先了解當電腦在執行你寫的 code，其實是看不懂你寫的文字是什麼意思，更精確地說是需要透過中間一個媒介去翻譯成電腦看得懂的東西。而這個媒介是是由人寫出來的程式就是語法解析器，又稱為編譯器（Compilers）。</p>\n<p><img src=\"https://i.imgur.com/500vRoE.png\" alt=\"給電腦執行的其實是被轉換過，讓電腦看得懂要做什麼。\"></p>\n<p><strong>那麼編譯器是怎麼運作的呢？</strong></p>\n<p>當你輸入一段文字，例如： console.log(‘Hello’)，編譯器會一個字一個字地讀，當讀完整個詞時，得到關鍵字 <code>console.log(&#39;Hello&#39;)</code>，就會轉換給電腦看得懂的指令。</p>\n<h2 id=\"詞彙環境-Lexical-Environments\"><a href=\"#詞彙環境-Lexical-Environments\" class=\"headerlink\" title=\"詞彙環境 (Lexical Environments)\"></a>詞彙環境 (Lexical Environments)</h2><hr>\n<blockquote>\n<p>程式碼在程式中實際所在的位置</p>\n</blockquote>\n<p>詞彙環境在於一些程式語言中，認為程式碼寫在哪裡是很重要的。（不是每個程式語言都這樣）因為它幫助語法解析器看你寫的程式碼，它的語法、它的單字做決定，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function greeting () &#123;</span><br><span class=\"line\">    var a &#x3D; &#39;hello world&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以語法解析器讀到 <code>var a = &#39;hello world&#39;</code> ，它就會了解說，這一段的位置是在 <code>greeting()</code> 這個 function 裡面。</p>\n<h2 id=\"執行環境-Execution-Contexts\"><a href=\"#執行環境-Execution-Contexts\" class=\"headerlink\" title=\"執行環境 (Execution Contexts)\"></a>執行環境 (Execution Contexts)</h2><hr>\n<p>一般在執行程式的時候，會有許多的詞彙環境，而執行環境會去管理哪一個要執行。</p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><hr>\n<p><a href=\"https://www.guru99.com/syntax-analysis-parsing-types.html\" target=\"_blank\" rel=\"noopener\">圖片來源</a><br><a href=\"https://www.udemy.com/course/javascriptjs/\" target=\"_blank\" rel=\"noopener\">JavaScript 全攻略：克服 JS 的奇怪部分</a></p>\n","categories":["JavaScript 的怪奇物語"],"tags":["javascript","語法解析器","詞彙環境","執行環境"]},{"title":"JS notice： 名稱/值配對與物件","url":"/bucky0112.github.io/2020/04/13/JSnotice%EF%BC%9A%E5%80%BC%E9%85%8D%E5%B0%8D%E8%88%87%E7%89%A9%E4%BB%B6/","content":"<p>這篇會稍微了解物件在 JavaScript 中的判別。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"名稱-值配對\"><a href=\"#名稱-值配對\" class=\"headerlink\" title=\"名稱/值配對\"></a>名稱/值配對</h2><hr>\n<p>首先，<strong>名稱/值</strong>的配對，代表一個名稱會對應到唯一的值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">year &#x3D; 2020</span><br></pre></td></tr></table></figure>\n\n<p>嗯，就這樣而已，不用想的太複雜。</p>\n<h2 id=\"物件\"><a href=\"#物件\" class=\"headerlink\" title=\"物件\"></a>物件</h2><hr>\n<p>物件在 JavaScript 中也是名稱與值的配對組合，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  dcHero: &quot;Batman&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而這個名稱或值甚至可以是多種名稱/值的配對，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var dcHero &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;Batman&#39;,</span><br><span class=\"line\">  skill: [&#39;有錢&#39;, &#39;有高級裝備&#39;, &#39;潛行&#39;],</span><br><span class=\"line\">  location: &#123;</span><br><span class=\"line\">    place: &#39;高譚市&#39;,</span><br><span class=\"line\">    base: &#39;韋恩豪宅&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就算是這樣多層的關係，也可以看得出名稱/值的關係，不用想的太複雜。</p>\n","categories":["JavaScript 的怪奇物語"],"tags":["javascript","物件"]},{"title":"JS 基礎回顧 - function","url":"/bucky0112.github.io/2020/04/11/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-function/","content":"<p>在看 kuro 大神寫的 <a href=\"https://www.tenlong.com.tw/products/9789864344130\" target=\"_blank\" rel=\"noopener\">0 陷阱！0 誤解！8 天重新認識 JavaScript！</a>（不是業配，這本書很棒）中提到，JavaScript 最核心也最容易被誤用的部份非函式（function）莫屬。我一開始在學 JS 時，碰到函式就覺得非常挫折，因此目前在整理這個筆記時，希望以後可以不用再踩坑？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"函式宣告\"><a href=\"#函式宣告\" class=\"headerlink\" title=\"函式宣告\"></a>函式宣告</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function sayhello() &#123;</span><br><span class=\"line\">  console.log (&#39;hi&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayhello()  &#x2F;&#x2F; 印出&#39;hi&#39;</span><br></pre></td></tr></table></figure>\n\n<p>如上面的例子可以看到，函式的宣告及呼叫的運作。</p>\n<p><img src=\"https://i.imgur.com/HRVJOZV.png\" alt=\"Image\"></p>\n<p>一個宣告函式主要會包含三個部份：</p>\n<ul>\n<li>函式的名稱（或是可能沒有名稱）。</li>\n<li>小括號 () 中的部份是參數，可以帶入無限個。</li>\n<li>大括號 {} 中的部份，是主要區塊，放重複執行的內容。</li>\n</ul>\n<p>再看一個帶入參數的例子，如果想要得到正方形的面積的話，公式是邊長 x 邊長，所以在 function 中可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getSquareArea (side) &#123;</span><br><span class=\"line\">  var answer &#x3D; side * side</span><br><span class=\"line\">  console.log(answer)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getSquareArea(50)  &#x2F;&#x2F; 引數帶入數值 50，答案得到 2500</span><br></pre></td></tr></table></figure>\n\n<p>當呼叫一個需要帶入資料的函式，像上面的例子，在函式名稱後的小括號 () 傳入使用的值，可以是變數或是數值，稱為<strong>引數</strong>。</p>\n<h3 id=\"回傳值\"><a href=\"#回傳值\" class=\"headerlink\" title=\"回傳值\"></a>回傳值</h3><hr>\n<p>在建立 function，如果希望透過呼叫後可以得到回應結果，可以透過 return 來取得回傳值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)     &#x2F;&#x2F; 回傳是不是 60 分</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var myTest &#x3D; 59;          </span><br><span class=\"line\"></span><br><span class=\"line\">if (isPass(myTest)) &#123;      </span><br><span class=\"line\">  console.log(&#39;及格&#39;)      &#x2F;&#x2F; 如果就印出及格</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;不及格&#39;)    &#x2F;&#x2F; 如果不是就印出不及格，最後結果是不及格</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看一個例子，試著計算三角形的面積，公式是底 x 高 / 2，這次引數以變數方式帶入，所以可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getTriangleArea (base, height) &#123;</span><br><span class=\"line\">  return base * height * 0.5</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 用變數帶入底10，高20</span><br><span class=\"line\">var b &#x3D; 10;</span><br><span class=\"line\">var h &#x3D; 20</span><br><span class=\"line\">console.log(getTriangleArea (b, h)) &#x2F;&#x2F; 得到答案 100</span><br></pre></td></tr></table></figure>\n\n<p>還可以重複使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var area1 &#x3D; getTriangleArea (50, 60);</span><br><span class=\"line\">var area2 &#x3D; getTriangleArea (90, 200);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(area1); &#x2F;&#x2F; 得到答案 1500</span><br><span class=\"line\">console.log(area2)  &#x2F;&#x2F; 得到答案 9000</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"匿名函式\"><a href=\"#匿名函式\" class=\"headerlink\" title=\"匿名函式\"></a>匿名函式</h2><hr>\n<p>在上一個函式中的寫法是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isPass (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在另一種的寫法，透過<code>變數名稱 = function ([參數] {...})</code>,將一個函式透過 = 指定給某個變數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; function 後面沒有名稱</span><br><span class=\"line\">var isPass &#x3D; function (score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因為在變數型別中，除了基本型別以外的都是<strong>物件型別</strong>，所以可以被呼叫，自然也可以透過變數存入。</p>\n<p>也由於在這個例子中，function 後面沒有名稱，所以是<strong>匿名函式</strong>。</p>\n<p>如果要替它加上名稱也是可以，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func(score) &#123;</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是要注意的是，這個 func 只在<strong>自己函式範圍</strong>有效，看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof func);  &#x2F;&#x2F; 使用 typeof 可以判斷型別</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof func);</span><br></pre></td></tr></table></figure>\n\n<p>上面的結果，第一個 typeof 判斷是 function，第二個則是出現 undefined，func 一旦不在自己函式範圍內，就不存在了。</p>\n<p>不過如果想要取得這個 function 的名稱，也可以透過自定義的變數名稱，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var isPass &#x3D; function func (score) &#123;</span><br><span class=\"line\">  console.log(typeof isPass);</span><br><span class=\"line\">  return (score &gt;&#x3D; 60)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(typeof isPass)</span><br></pre></td></tr></table></figure>\n\n<p>2 個 console.log 結果都會顯示 function。</p>\n","categories":["JS 基礎回顧"],"tags":["function","匿名函式"]},{"title":"JS 基礎回顧 - 物件與陣列","url":"/bucky0112.github.io/2020/05/01/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E7%89%A9%E4%BB%B6%E8%88%87%E9%99%A3%E5%88%97/","content":"<p>在 JavaScript 中，物件與陣列這兩個還滿常搭配使用的，所以這篇就混在一起講吧。<del>絕對不是為了要省事。</del></p>\n<a id=\"more\"></a>\n<h2 id=\"陣列-Array\"><a href=\"#陣列-Array\" class=\"headerlink\" title=\"陣列 Array\"></a>陣列 Array</h2><hr>\n<p><img src=\"https://i.imgur.com/IIHLVfs.jpg\" alt=\"\"></p>\n<p>陣列的概念有點像放藥的盒子，一個蘿蔔一個坑。<br>可以是零到多數元素的集合，可以放入資料，例如數字、文字，或是陣列、物件、函式，沒有規定只能放什麼進去。</p>\n<h3 id=\"如何建立陣列\"><a href=\"#如何建立陣列\" class=\"headerlink\" title=\"如何建立陣列\"></a>如何建立陣列</h3><p>可以是空陣列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; []</span><br></pre></td></tr></table></figure>\n\n<p>如果要建立資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [1, 2, 3, &#39;aaa&#39;, &#39;bbb&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>或是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">a[0] &#x3D; 123;</span><br><span class=\"line\">a[1] &#x3D; 456;</span><br><span class=\"line\">a[2] &#x3D; &#39;abc&#39;</span><br></pre></td></tr></table></figure>\n\n<p>要注意的是，陣列是有順序的集合，第一筆資料是從 0 開始。</p>\n<h3 id=\"取得陣列的長度\"><a href=\"#取得陣列的長度\" class=\"headerlink\" title=\"取得陣列的長度\"></a>取得陣列的長度</h3><p><code>length</code>，陣列的長度，等於陣列元素的個數，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var list &#x3D; [1, 2, 3, &#39;aa&#39;, &#39;bb&#39;, 123];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(list.length);   &#x2F;&#x2F; 會得到6</span><br></pre></td></tr></table></figure>\n\n<p>如果想取用特定某一個元素，假設取第一個：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var list &#x3D; [1, 2, 3, &#39;aa&#39;, &#39;bb&#39;, 123];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(list[0]);  &#x2F;&#x2F; 會印出1</span><br><span class=\"line\">console.log(list[1]);  &#x2F;&#x2F; 會印出2</span><br><span class=\"line\">console.log(list[2]);  &#x2F;&#x2F; 會印出3</span><br><span class=\"line\">console.log(list[3]);  &#x2F;&#x2F; 會印出&quot;aa&quot;</span><br><span class=\"line\">console.log(list[4]);  &#x2F;&#x2F; 會印出&quot;bb&quot;</span><br><span class=\"line\">console.log(list[5]);  &#x2F;&#x2F; 會印出123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"陣列的操作\"><a href=\"#陣列的操作\" class=\"headerlink\" title=\"陣列的操作\"></a>陣列的操作</h3><p>如果想加入新的元素，可以使用 <code>push</code> 或是 <code>unshift</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">heroes.push(&#39;蜘蛛人&#39;);      &#x2F;&#x2F; 從後面新增</span><br><span class=\"line\">heroes.unshift(&#39;美國隊長&#39;); &#x2F;&#x2F; 從前面新增</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">console.log(heroes[0]);   &#x2F;&#x2F; &#39;蜘蛛人&#39;</span><br><span class=\"line\">console.log(heroes[5]);   &#x2F;&#x2F; &#39;美國隊長&#39;</span><br></pre></td></tr></table></figure>\n\n<p>想移除元素的話，可以使用 <code>shift</code> 或是 <code>pop</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">heroes.pop();         &#x2F;&#x2F; 從後面開始移除</span><br><span class=\"line\">console.log(heroes);  &#x2F;&#x2F; [&quot;蝙蝠俠&quot;, &quot;超人&quot;, &quot;閃電俠&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var badguys &#x3D; [&#39;小丑&#39;, &#39;雷克斯&#39;, &#39;企鵝&#39;, &#39;班恩&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">badguys.shift();      &#x2F;&#x2F; 從前面開始移除</span><br><span class=\"line\">console.log(badguys)  &#x2F;&#x2F; [&#39;雷克斯&#39;, &#39;企鵝&#39;, &#39;班恩&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>如果想檢查某個物件有沒有在陣列裡，可以使用 <code>indexOf</code> 這個語法，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var heroes &#x3D; [&#39;蝙蝠俠&#39;, &#39;超人&#39;, &#39;閃電俠&#39;, &#39;水行俠&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 想查找閃電俠</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;閃電俠&#39;))  &#x2F;&#x2F; 2</span><br><span class=\"line\">&#x2F;&#x2F; 想查找蝙蝠俠</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;蝙蝠俠&#39;))  &#x2F;&#x2F; 0</span><br><span class=\"line\">&#x2F;&#x2F; 想查找小丑？</span><br><span class=\"line\">console.log(heroes.indexOf(&#39;小丑&#39;))   &#x2F;&#x2F; -1，因為陣列中沒資料，所以比 0 小，是 -1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"物件\"><a href=\"#物件\" class=\"headerlink\" title=\"物件\"></a>物件</h2><hr>\n<p>在 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/\">JS 基礎回顧 - 變數與資料型別</a> 有提到變數值的型別分成基本型別跟物件型別。而基本上在 JavaScript 的世界中，除了基本型別以外，絕大部分都可以歸類為物件型別。</p>\n<p>那麼物件是什麼呢？它是一種元素的集合，是 key 跟 value 的組合。</p>\n<h3 id=\"如何建立物件\"><a href=\"#如何建立物件\" class=\"headerlink\" title=\"如何建立物件\"></a>如何建立物件</h3><p>那麼該如何建立一個物件？<br>最基本的方法，宣告一個變數，加 = 再加 {}，就是一個基本的物件了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果試著用 <code>console.log(batman)</code> 的話，會顯示是 object。</p>\n<p>下面是一個標準的物件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;蝙蝠俠&#39;,</span><br><span class=\"line\">  skills: [&#39;有錢&#39;, &#39;潛行&#39;, &#39;格鬥技&#39;],</span><br><span class=\"line\">  age: 35 </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件新增屬性\"><a href=\"#物件新增屬性\" class=\"headerlink\" title=\"物件新增屬性\"></a>物件新增屬性</h3><p>如果要在原本的物件增加屬性的話，可以試著用以下的方法：</p>\n<ol>\n<li><code>變數名稱.新增屬性 = 值</code>，例如：<code>batman.tools = &#39;蝙蝠車&#39;</code> </li>\n<li>使用前面陣列教過的 <code>push</code>，例如：<code>batman.skills.push(&#39;解謎能力&#39;)</code>，注意使用 <code>push</code> 新增是會從陣列後面擠進去。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var batman &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;蝙蝠俠&#39;,</span><br><span class=\"line\">  skills: [&#39;有錢&#39;, &#39;潛行&#39;, &#39;格鬥技&#39;],</span><br><span class=\"line\">  age: 35 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">batman.tools &#x3D; &#39;蝙蝠車&#39;;</span><br><span class=\"line\">batman.skills.push(&#39;解謎能力&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman.tools);        &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman.skills)        &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件存取屬性\"><a href=\"#物件存取屬性\" class=\"headerlink\" title=\"物件存取屬性\"></a>物件存取屬性</h3><p>如果要知道剛剛新增的屬性有沒有成功加入，可以試試 <code>.</code> 或是 <code>[]</code> 來存取：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(batman.tools);        &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman.skills);       &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman[&#39;tools&#39;]);     &#x2F;&#x2F; &#39;蝙蝠車&#39;</span><br><span class=\"line\">console.log(batman[&#39;skills&#39;])     &#x2F;&#x2F; [&quot;有錢&quot;, &quot;潛行&quot;, &quot;格鬥技&quot;, &quot;解謎能力&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件刪除\"><a href=\"#物件刪除\" class=\"headerlink\" title=\"物件刪除\"></a>物件刪除</h3><p>如果想刪除某個屬性的話，就可以使用 <code>delete</code>，例如想刪除掉 age 的話，下面兩種方式都可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete batman.age;</span><br><span class=\"line\">delete batman[&#39;age&#39;];</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(batman)</span><br></pre></td></tr></table></figure>\n\n<p>所以出來的結果，就會只剩下 name 跟 skills</p>\n<h3 id=\"如何取得物件的屬性？\"><a href=\"#如何取得物件的屬性？\" class=\"headerlink\" title=\"如何取得物件的屬性？\"></a>如何取得物件的屬性？</h3><p>如果想取得屬性的話，可以使用 <code>Object.keys(obj)</code>，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(Object.keys(batman)) &#x2F;&#x2F; 得到 [&quot;name&quot;, &quot;skills&quot;, &quot;age&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"物件可以怎麼運用？\"><a href=\"#物件可以怎麼運用？\" class=\"headerlink\" title=\"物件可以怎麼運用？\"></a>物件可以怎麼運用？</h3><p>前面陣列提到，幾乎什麼資料都可以放。<br>物件也差不多，能包文字跟數字，還可以包陣列跟物件，像大腸包小腸一樣，所以可以做出以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var tanjirou &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;竈門炭治郎&#39;,</span><br><span class=\"line\">  job: &#39;鬼殺隊士&#39;,</span><br><span class=\"line\">  skills: [&#39;超強嗅覺&#39;, &#39;疼妹妹&#39;, &#39;水之呼吸&#39;],     &#x2F;&#x2F; 目前只看到動畫第 8 集</span><br><span class=\"line\">  finalMove: function () &#123;</span><br><span class=\"line\">    return this.skills[2]                     &#x2F;&#x2F; this 表示這個物件名稱 tanjirou</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(tanjirou.finalMove() + &#39; 拾之型 生生流轉&#39;)  &#x2F;&#x2F; &quot;水之呼吸 拾之型 生生流轉&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多組物件放陣列\"><a href=\"#多組物件放陣列\" class=\"headerlink\" title=\"多組物件放陣列\"></a>多組物件放陣列</h3><p>如果物件有多組資料差不多的話，像是 key 一樣，但是 value 不太一樣的，還可以放在陣列中，來看看實例的操作：</p>\n<p>假設想要比較 iPhone 11 系列的所有手機的話，下面有 3 組物件，分別是 iPhone 11、Pro 跟 ProMax：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iPhone11 &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 128, 256],</span><br><span class=\"line\">  display: 6.1,</span><br><span class=\"line\">  battery: &#39;3110 mAh&#39;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iPhone11Pro &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 256, 512],</span><br><span class=\"line\">  display: 5.8,</span><br><span class=\"line\">  battery: &#39;3190 mAh&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iPhone11ProMax &#x3D; &#123;</span><br><span class=\"line\">  name: &#39;iPhone 11 Pro Max&#39;,</span><br><span class=\"line\">  system: &#39;iOS 13&#39;,</span><br><span class=\"line\">  memory: &#39;4 GB&#39;,</span><br><span class=\"line\">  storage: [64, 256, 512],</span><br><span class=\"line\">  display: 6.5,</span><br><span class=\"line\">  battery: &#39;3969 mAh&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>為了方便管理，就可以把這 3 筆放入陣列中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iPhone11Series &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 128, 256],</span><br><span class=\"line\">    display: 6.1,</span><br><span class=\"line\">    battery: &#39;3110 mAh&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 256, 512],</span><br><span class=\"line\">    display: 5.8,</span><br><span class=\"line\">    battery: &#39;3190 mAh&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro Max&#39;,</span><br><span class=\"line\">    system: &#39;iOS 13&#39;,</span><br><span class=\"line\">    memory: &#39;4 GB&#39;,</span><br><span class=\"line\">    storage: [64, 256, 512],</span><br><span class=\"line\">    display: 6.5,</span><br><span class=\"line\">    battery: &#39;3969 mAh&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>如果想要顯示 3 者的螢幕尺寸：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var iPhone11Display &#x3D; iPhone11Series[0].display;</span><br><span class=\"line\">var iPhone11ProDisplay &#x3D; iPhone11Series[1].display;</span><br><span class=\"line\">var iPhone11ProMaxDisplay &#x3D; iPhone11Series[2].display;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(</span><br><span class=\"line\">  &#39;iPhone 11 系列 的顯示器個別是&#39; + </span><br><span class=\"line\">  iPhone11Display + &#39;吋、&#39; + </span><br><span class=\"line\">  iPhone11ProDisplay + &#39;吋、&#39; + </span><br><span class=\"line\">  iPhone11ProMaxDisplay + &#39;吋&#39;</span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n\n<p>最後得到的結果是 “iPhone 11 系列 的顯示器個別是6.1吋、5.8吋、6.5吋”</p>\n","categories":["JS 基礎回顧"],"tags":["w3HexSchool","javascript","物件","陣列"]},{"title":"JS 基礎回顧 - 迴圈","url":"/bucky0112.github.io/2020/05/12/JSreview-loop/","content":"<p>迴圈 (Loop) 在 JavaScript 中，當遇到需要重複做某件事時，是個非常好用的方法。而迴圈又分為幾種不同的方式，本篇將會介紹如何使用比較常見的作法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"迴圈\"><a href=\"#迴圈\" class=\"headerlink\" title=\"迴圈\"></a>迴圈</h2><hr>\n<p>如果一件重要的事，想要說三次的話，可能會這樣表達：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(&#39;很重要&#39;); &#x2F;&#x2F; &quot;很重要&quot;</span><br><span class=\"line\">console.log(&#39;很重要&#39;); &#x2F;&#x2F; &quot;很重要&quot;</span><br><span class=\"line\">console.log(&#39;很重要&#39;)  &#x2F;&#x2F; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p>但是在 JavaScript 中，可以使用迴圈來幫助我們更省時省力地來處理這件事：</p>\n<h2 id=\"for-迴圈\"><a href=\"#for-迴圈\" class=\"headerlink\" title=\"for 迴圈\"></a>for 迴圈</h2><hr>\n<p>for 迴圈的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var i;</span><br><span class=\"line\"></span><br><span class=\"line\">for () &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>{ }中，要重複一直做的事情，例如：<br><code>{console.log(&#39;很重要&#39;)}</code></p>\n<p>( )中，要從哪裏開始，到那裏結束，還有每回合會做什麼事情，例如：<br><code>for (i = 0; i &lt; 3; i++)</code><br>上面那段的意思是：i 從 0 開始計算；到 3 的時候結束；i + 1<br>寫出來就是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var i</span><br><span class=\"line\">for (i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;)</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;很重要&quot; &quot;很重要&quot; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p>也可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (var i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;)</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;很重要&quot; &quot;很重要&quot; &quot;很重要&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/BZlPcjz.png\" alt=\"Image\"></p>\n<p>畫紅線的是「初始值」，用來初始化 for 迴圈中的計數器。<br>雖然在這裡可以用 var 來宣告變數，但要小心，這裡的變數並不是專屬 for 迴圈內的變數，變數 i 的有效範圍其實跟 for 迴圈是相同的。</p>\n<p>綠線的部分是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>\n<p>藍線的部分是，在每一次執行完大括號 { } 區塊的程式碼之後，會執行這段程式碼。</p>\n<h2 id=\"while-迴圈\"><a href=\"#while-迴圈\" class=\"headerlink\" title=\"while 迴圈\"></a>while 迴圈</h2><hr>\n<p>使用 while 迴圈做出上面的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var i &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">while (i &lt; 3)&#123;</span><br><span class=\"line\">  console.log(&#39;很重要&#39;);</span><br><span class=\"line\">  i++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/JFFQMSs.png\" alt=\"Image\"></p>\n<p>括號 () 內代表的是「執行迴圈的條件」，指的是當滿足這個條件 (結果為 true) 的時候，就會進入大括號 { } 的區塊，然後執行內部程式。</p>\n<p>要注意的是在迴圈中，如果第三個條件 <code>i++</code> 沒寫的話，會發生什麼事呢？<br>第一圈 i = 0，第二圈 i 沒有 + 1，所以一樣是 0，以此類推會一直無線迴圈，所以要特別注意。</p>\n<h2 id=\"for-的運用\"><a href=\"#for-的運用\" class=\"headerlink\" title=\"for 的運用\"></a>for 的運用</h2><hr>\n<p>因為 for 迴圈比較常用，所以以下的範例將會使用 for 迴圈來做示範。</p>\n<h3 id=\"for-加總\"><a href=\"#for-加總\" class=\"headerlink\" title=\"for - 加總\"></a>for - 加總</h3><p>下方有一個陣列，裡面紀錄著 iPhone 11 系列的價錢，如果想要使用 for 迴圈把價錢全部加總的話，該怎麼做呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var alliphone11 &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11&#39;,</span><br><span class=\"line\">    price: 24900</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 Pro&#39;,</span><br><span class=\"line\">    price: 35900</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;iPhone 11 ProMax&#39;,</span><br><span class=\"line\">    price: 39900</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以設一個變數，值給數字 0，讓它使用 for 迴圈去跑加總：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var totalPrice &#x3D; 0;</span><br><span class=\"line\">var alliphonelength &#x3D; alliphone11.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i&#x3D;0; i&lt;alliphonelength; i++) &#123;</span><br><span class=\"line\">  totalPrice +&#x3D; alliphone11[i].price</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(totalPrice)  &#x2F;&#x2F;  100700</span><br></pre></td></tr></table></figure>\n\n<p>最後 3 次的加總得到 100700。</p>\n<h3 id=\"for-加上判斷式的運用\"><a href=\"#for-加上判斷式的運用\" class=\"headerlink\" title=\"for 加上判斷式的運用\"></a>for 加上判斷式的運用</h3><p>for 迴圈也可以加入 if 來判斷，例如想找出價格超過 3 萬的 iPhone 的話，就可以這麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var alliphonelength &#x3D; alliphone11.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i&#x3D;0; i&lt;alliphonelength; i++) &#123;</span><br><span class=\"line\">  if(alliphone11[i].price &gt; 30000) &#123;</span><br><span class=\"line\">    console.log(alliphone11[i].name + &#39;的價格超過 3 萬&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; &quot;iPhone 11 Pro的價格超過 3 萬&quot;</span><br><span class=\"line\">&#x2F;&#x2F; &quot;iPhone 11 ProMax的價格超過 3 萬&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"break-與-continue\"><a href=\"#break-與-continue\" class=\"headerlink\" title=\"break 與 continue\"></a>break 與 continue</h3><p>如果在迴圈中，想要提早離開或是跳過其中幾項的話，這時候就可以使用 break 或是 continue。</p>\n<p>來看看最近熱門的動物森友會範例，今天如果身上一堆大頭菜想賣的話，可以去 <a href=\"https://ac-room.cc/\" target=\"_blank\" rel=\"noopener\">在線等! 動森揪團工具</a> <del>我賣菜都來這裏</del>，島主都會打上目前菜價多少，要多少張機票一趟。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var turnipExchange &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;莫妮卡&#39;,</span><br><span class=\"line\">    sell: 540,</span><br><span class=\"line\">    tripTicket: 2 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;小潤&#39;,</span><br><span class=\"line\">    sell: 640,</span><br><span class=\"line\">    tripTicket: 4 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;傑克&#39;,</span><br><span class=\"line\">    sell: 600,</span><br><span class=\"line\">    tripTicket: 3 </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &#39;阿保&#39;,</span><br><span class=\"line\">    sell: 560,</span><br><span class=\"line\">    tripTicket: 2</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>那麼我們可以來設條件，如果找到符合菜價 550 以上，機票 3 張就可以賣，就不用繼續找下去了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var teLength &#x3D; turnipExchange.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;teLength; i++) &#123;</span><br><span class=\"line\">  if(turnipExchange[i].sell &gt;&#x3D; 550 &amp;&amp; turnipExchange[i].tripTicket &lt;&#x3D;3) &#123;</span><br><span class=\"line\">    console.log(&#39;我要跟&#39; + turnipExchange[i].name + &#39;賣菜&#39;)</span><br><span class=\"line\">    break;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;  &#x2F;&#x2F; &quot;我要跟傑克賣菜&quot;</span><br></pre></td></tr></table></figure>\n\n<p>跑完的結果是 - 我要跟傑克賣菜。<br>如果沒有加上 <code>break</code> 會怎麼樣呢？<br>如果沒有加上 <code>break</code> 的條件，for 迴圈會一直跑，再繼續找下一個符合條件的並印出來，會是這樣：</p>\n<p>“我要跟傑克賣菜”<br>“我要跟阿保賣菜”</p>\n<p><del>除非你有很多大頭菜啦，不然找一個島主來賣就夠了。</del></p>\n<hr>\n<p>而 break 跟 continue 兩者的功能差別：</p>\n<ul>\n<li>break 會直接跳離迴圈。</li>\n<li>continue 會跳過一次，然後繼續下一次迴圈。</li>\n</ul>\n<hr>\n<p>看看 continue 的用法：</p>\n<p>假設想要出島找居民，以下是我們找的居民：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var villagers &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;cat&#39;,</span><br><span class=\"line\">    name: &#39;艷后&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;deer&#39;,</span><br><span class=\"line\">    name: &#39;彼得&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;koala&#39;,</span><br><span class=\"line\">    name: &#39;簡培拉&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;cat&#39;,</span><br><span class=\"line\">    name: &#39;莎莎&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    species: &#39;chicken&#39;,</span><br><span class=\"line\">    name: &#39;烏骨雞&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>我們鎖定的對象是貓，所以只要考慮貓就好，其他動物就不考慮了，所以可以這麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var length &#x3D; villagers.length;</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class=\"line\">  if(villagers[i].species !&#x3D;&#x3D; &#39;cat&#39;) &#123;</span><br><span class=\"line\">    continue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    console.log(villagers[i].name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後得到的是艷后跟莎莎。</p>\n","categories":["JS 基礎回顧"],"tags":["w3HexSchool","javascript","迴圈"]},{"title":"Think first, code later","url":"/bucky0112.github.io/2020/04/03/Think%20first,%20code%20later/","content":"<p>以前看過一篇文章，是用拉麵店販賣機講解關於 api 的概念，我覺得作者很厲害，可以用淺顯易懂的方式讓當時還是前端麻瓜的我看得懂，那篇文章很推薦新手去看 -&gt; <a href=\"https://medium.com/@hulitw/ramen-and-api-6238437dc544\" target=\"_blank\" rel=\"noopener\">從拉麵店的販賣機理解什麼是 API</a></p>\n<p>最近作者開了一系列的課 -&gt; <a href=\"https://lidemy.com/p/alg101-leetcode\" target=\"_blank\" rel=\"noopener\">先別急著寫 leetcode</a>。因為我不是本科系出身，所以確實在解題時很容易遇上困難，不然就是會想很久。剛好看到這個課程就覺得蠻需要培養如何寫程式的思維，而且重點是免費喔！免費喔！免費喔！（很重要要說 3 次）所以這個系列會記載一些對我有幫助的筆記，希望能讓自己更進步一些。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"會寫程式的人與初學者差別在哪？\"><a href=\"#會寫程式的人與初學者差別在哪？\" class=\"headerlink\" title=\"會寫程式的人與初學者差別在哪？\"></a>會寫程式的人與初學者差別在哪？</h2><hr>\n<h3 id=\"會寫程式的人\"><a href=\"#會寫程式的人\" class=\"headerlink\" title=\"會寫程式的人\"></a>會寫程式的人</h3><ol>\n<li>先想解法</li>\n<li>如果是有做過或是簡單的，就會直接構思出方法</li>\n<li>如果比較困難或是複雜的問題，就把解法轉換成程式碼</li>\n</ol>\n<h3 id=\"初學者\"><a href=\"#初學者\" class=\"headerlink\" title=\"初學者\"></a>初學者</h3><ul>\n<li>邊寫邊想怎麼解</li>\n<li>試著套用自己以前學過的語法</li>\n</ul>\n<p>這個我自己蠻有感覺的，確實一開始會邊寫邊想，然後如果卡住了，就翻筆記看有什麼語法可以拿來套用，不過通常都沒什麼好下場就是了，哈。</p>\n<h2 id=\"在解題會有兩種情況\"><a href=\"#在解題會有兩種情況\" class=\"headerlink\" title=\"在解題會有兩種情況\"></a>在解題會有兩種情況</h2><hr>\n<h3 id=\"看題目覺得自己解得開\"><a href=\"#看題目覺得自己解得開\" class=\"headerlink\" title=\"看題目覺得自己解得開\"></a>看題目覺得自己解得開</h3><ul>\n<li>有效率的解開</li>\n<li>有解開但是時間花較久</li>\n<li>最後解不開</li>\n</ul>\n<h3 id=\"看題目就覺得看不懂\"><a href=\"#看題目就覺得看不懂\" class=\"headerlink\" title=\"看題目就覺得看不懂\"></a>看題目就覺得看不懂</h3><p>撇開第二種看不懂的情況，在看得懂的情形下，以我自己比較常遇到解不開的狀況是，一開始覺得應該可以怎麼做，可是最後不知道怎麼將想法轉換成程式碼，而講者推薦了一些做法。</p>\n<h2 id=\"推薦初學者寫程式的作法\"><a href=\"#推薦初學者寫程式的作法\" class=\"headerlink\" title=\"推薦初學者寫程式的作法\"></a>推薦初學者寫程式的作法</h2><hr>\n<p>首先看一道題目，然後按照以下的作法，題目是：</p>\n<p>如何印出 1-100 之間的偶數？</p>\n<h3 id=\"想一下解法，不寫任何程式碼\"><a href=\"#想一下解法，不寫任何程式碼\" class=\"headerlink\" title=\"想一下解法，不寫任何程式碼\"></a>想一下解法，不寫任何程式碼</h3><p>先不要急著想寫 code，想如何一步一步解決的方法。</p>\n<ol>\n<li>如何印出 1-100</li>\n<li>如何判斷偶數</li>\n</ol>\n<h3 id=\"把解法寫成-pseudo-code\"><a href=\"#把解法寫成-pseudo-code\" class=\"headerlink\" title=\"把解法寫成 pseudo code\"></a>把解法寫成 pseudo code</h3><p>虛擬碼（pseudo code）在維基百科的解釋： </p>\n<blockquote>\n<p>更類似自然語言。它是半形式化、不標準的語言。我們可以將整個演算法執行過程的結構用接近自然語言的形式（這裡可以使用任何一種作者熟悉的文字，例如中文、英文，重點是將程式的意思表達出來）描述出來。使用虛擬碼，可以幫助我們更好的表述演算法，不用拘泥於具體的實現。</p>\n</blockquote>\n<p>主要是讓自己看得懂的方法，首先要讓如何印出 1-100：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>然後題目是要印出偶數，所以把第 3 步改成判斷式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">讓 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100，結束</span><br><span class=\"line\">如果 i 是偶數，印出 i</span><br><span class=\"line\">讓 i 可以一直累加</span><br><span class=\"line\">然後再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>雖然 pseudo code 沒有一定的形式，但是可以練習寫成比較像是程式碼的 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">if i &gt; 100 then exit</span><br><span class=\"line\">if i % 2 &#x3D;&#x3D;&#x3D; 0, print i</span><br><span class=\"line\">i &#x3D; i + 1</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊還可以進一步寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (i from 1 to 100) do</span><br><span class=\"line\">\tif (i % 2 &#x3D;&#x3D;&#x3D; 0)</span><br><span class=\"line\">\tprint i</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"把-pseudo-code-翻譯成程式碼\"><a href=\"#把-pseudo-code-翻譯成程式碼\" class=\"headerlink\" title=\"把 pseudo code 翻譯成程式碼\"></a>把 pseudo code 翻譯成程式碼</h3><p>到了這個步驟，如果有學過程式的話，應該就可以把程式碼寫出來，這邊使用 JavaScript 來寫，就可以印出從 1-100 的偶數：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for ( let i &#x3D; 1; i &lt; 100; i ++) &#123;</span><br><span class=\"line\">\tif(i % 2 &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">\t\tconsole.log(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["先別急著寫 leetcode 課程心得"],"tags":["先別急著寫 leetcode","pseudo code"]},{"title":"執行環境：程式執行","url":"/bucky0112.github.io/2020/05/19/execution-context-code-execution/","content":"<p>JavaScript 在產生執行環境時，會有兩個階段。</p>\n<ol>\n<li>第一階段是創造，會設定變數和函數到記憶體中。</li>\n<li>第二階段則是執行。</li>\n</ol>\n<p>而這篇文章則會提到執行的部份。</p>\n<a id=\"more\"></a>\n\n<p>當在創造階段時，都已經設定好所有東西，到執行這個階段就很單純，只是逐行執行自己寫好的程式碼而已。進行編譯跟轉換後，讓電腦看得懂，這樣就結束了。</p>\n<p>不免俗的來看一下程式碼，當執行以下的程式碼後，會如何運作呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b();            </span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n\n<p>首先呼叫 b()，沒有什麼問題，會執行 function 內的程式碼，印出 ‘Test’。</p>\n<p>第一個 <code>console.log(a)</code>，由於在創造階段時，先給 a 一個 undefined，然後執行，所以就印出 undefined。</p>\n<p>第二個 <code>console.log(a)</code>，因為有給 a 一個值，所以執行後，就印出 ‘Hello’。</p>\n<p>再看其他例子，下面 4 個 <code>console.log</code> 會個別印出什麼？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">var b &#x3D; &#39;hello&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(c);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>a 沒有值，所以 undefined。</li>\n<li>b 到這行還沒有值，所以一樣先給 undefined。</li>\n<li>b 這時候已經有給值了，所以印出 ‘hello’。</li>\n<li>c 並沒有宣告變數，所以在記憶體中找不到 c，所以會是錯誤，c is not defined。</li>\n</ol>\n","categories":["JavaScript 的怪奇物語"],"tags":["javascript","程式執行"]},{"title":"JS 基礎回顧 - 變數與資料型別","url":"/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/","content":"<p>會寫這個系列，是想整理我之前的筆記，假如我哪天忘記的話，還可以讓我方便查找，順便加深自己的印象。<br>第一篇來回顧變數，看如何定義跟指定各種型別的用法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h2><hr>\n<p><img src=\"https://i.imgur.com/cPGhwBt.png\" alt=\"Image\"></p>\n<p><strong>變數</strong>像是一個容器，假設一個容器貼着 coca_cola 的標籤，裏面裝的是叫可樂的東西，當接觸到瓶子，就可以拿裏面的東西，裏面的東西就是可樂。<br>用 JavaScript 的語言來說就是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var coca_cola &#x3D; &quot;可樂&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>var = variable 的縮寫</strong><br><strong>coca_cola = 容器的標籤（變數名稱）</strong><br><strong>可樂 = 容器裡裝的內容（值）</strong></p>\n<h2 id=\"資料型別\"><a href=\"#資料型別\" class=\"headerlink\" title=\"資料型別\"></a>資料型別</h2><hr>\n<h3 id=\"基本型別\"><a href=\"#基本型別\" class=\"headerlink\" title=\"基本型別\"></a>基本型別</h3><p>變數值的型別主要分成<strong>基本型別</strong>跟<strong>物件型別</strong>，這個部份先來討論基本型別：</p>\n<ul>\n<li>number 數字</li>\n<li>string 字串</li>\n<li>boolean 布林值</li>\n<li>undefined </li>\n<li>null</li>\n</ul>\n<p>例如：數字 7、字串 “hello”、布林值 true / false</p>\n<h4 id=\"數字、字串\"><a href=\"#數字、字串\" class=\"headerlink\" title=\"數字、字串\"></a>數字、字串</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var name &#x3D; &quot;張無忌&quot;; &#x2F;&#x2F; 字串，可用單引號或雙引號把文字包起來</span><br><span class=\"line\">var power &#x3D; 100000; &#x2F;&#x2F; 數字，不需引號</span><br></pre></td></tr></table></figure>\n\n<p>如果要檢驗型別的話，可以使用 <code>typeof</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var num &#x3D; “123”;</span><br><span class=\"line\">console.log(typeof num) &#x2F;&#x2F; 會得到 string</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"布林值\"><a href=\"#布林值\" class=\"headerlink\" title=\"布林值\"></a>布林值</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var n &#x3D; true;  &#x2F;&#x2F; 布林值、布林值，不需引號</span><br><span class=\"line\">console.log(n) &#x2F;&#x2F; a &#x3D; true，所以結果是 true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"undefined-跟-null\"><a href=\"#undefined-跟-null\" class=\"headerlink\" title=\"undefined 跟 null\"></a>undefined 跟 null</h4><p>而 undefined 跟 null 比較特別，看以下的例子：</p>\n<p>如果定義了一個叫做 hello 的變數，但沒有指定值，<br>這時候 hello 的值是 undefined 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var hello   &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>如果定義 world 這個變數，指定為 null，<br>這時 world 的值就是 null 狀態</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var world &#x3D; null  &#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><strong>undefined = 未指定變數的內容，未定義但存在</strong><br><strong>null = 不存在</strong></p>\n<h3 id=\"如果把不同型別放在一起？\"><a href=\"#如果把不同型別放在一起？\" class=\"headerlink\" title=\"如果把不同型別放在一起？\"></a>如果把不同型別放在一起？</h3><p>同型別的值，例如數字放在一起，就會按照指示做加減乘除，但是如果不同型別放在一起會是如何？看以下的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(1 + 1); &#x2F;&#x2F; 印出 2</span><br><span class=\"line\">console.log(1 + &quot;1&quot;); &#x2F;&#x2F; 印出 11</span><br><span class=\"line\">console.log(&quot;hello&quot; + 123); &#x2F;&#x2F; 印出 hello123</span><br><span class=\"line\">console.log(&quot;hello&quot; + true); &#x2F;&#x2F; 印出 hellotrue</span><br><span class=\"line\">console.log(123 + true); &#x2F;&#x2F; 印出 124</span><br><span class=\"line\">console.log(123 + false); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(123 + null); &#x2F;&#x2F; 印出 123</span><br><span class=\"line\">console.log(&quot;123&quot; + null); &#x2F;&#x2F; 印出 123null</span><br><span class=\"line\">console.log(123 + undefined); &#x2F;&#x2F; 印出 NaN(Not a Number)</span><br><span class=\"line\">console.log(&quot;123&quot; + undefined); &#x2F;&#x2F; 印出 123undefined</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等號\"><a href=\"#等號\" class=\"headerlink\" title=\"等號\"></a>等號</h3><h4 id=\"a-1-1-是什麼情況\"><a href=\"#a-1-1-是什麼情況\" class=\"headerlink\" title=\"a + 1 = 1 是什麼情況?\"></a>a + 1 = 1 是什麼情況?</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 1;</span><br><span class=\"line\">a &#x3D; a + 1;</span><br><span class=\"line\">console.log(a);  &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<p>= 不是等號，是指定<br>a = a + 1;是 a + 1 完再指定回 a</p>\n<p>接著再看以下的情況：</p>\n<h4 id=\"等號，不一定等於『等於』\"><a href=\"#等號，不一定等於『等於』\" class=\"headerlink\" title=\"等號，不一定等於『等於』\"></a>等號，不一定等於『等於』</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var age &#x3D; 8;</span><br><span class=\"line\">if (age &#x3D; 10) &#123;</span><br><span class=\"line\">  console.log(&#39;yes&#39;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  console.log(&#39;no&#39;);</span><br><span class=\"line\">&#125;                     &#x2F;&#x2F; 結果會是 yes</span><br></pre></td></tr></table></figure>\n\n<p>等等，age 不是設定是 8 嗎？不等於 10 怎麼會是 yes 呢？<br>前面說過 = 不是等號，是指定的意思，如果是以上的情況，應該用 2 個等號或 3 個等號來做比較。</p>\n<p>2 個等號 =&gt; 比較內容物是不是一樣。<br>3 個等號 =&gt; 除了比較內容物之外，還有比較是不是資料形別，資料形別是不是一樣。<br>在 if (age = 10)中，age = 10 就是指定 age 爲 10</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(1 &#x3D;&#x3D; 1);     &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D; &#39;1&#39;);   &#x2F;&#x2F;  true</span><br><span class=\"line\">console.log(1 &#x3D;&#x3D;&#x3D; &#39;1&#39;);  &#x2F;&#x2F;  false</span><br></pre></td></tr></table></figure>\n\n<p>所以在判斷的時候，儘量可以的話就用三個等號會比較安全。</p>\n","categories":["JS 基礎回顧"],"tags":["javascript"]},{"title":"Vue.js 的 component 是什麼？","url":"/bucky0112.github.io/2020/06/01/vue-components/","content":"<p>當做完一個專案時，每當想要修改某樣東西時，都要再重新審視程式碼，這時候就會非常痛苦。<br>而 Vue.js 中有一個 component 的概念，就不用再害怕維護專案啦。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"元件概念\"><a href=\"#元件概念\" class=\"headerlink\" title=\"元件概念\"></a>元件概念</h2><hr>\n<p>而什麼是 component 呢？</p>\n<p><img src=\"https://i.imgur.com/MeHiDbO.png\" alt=\"Image\"></p>\n<blockquote>\n<p>圖片來源：<a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">Vue.js 官網</a></p>\n</blockquote>\n<p>它的概念是一個網頁中，一些比較常用的組件，例如：nav bar 或是 side bar 等等區塊。這時候使用 component 來控制一個區塊，這樣就會非常好整理以及修改。</p>\n<p>下面有一個點擊的範例，是從 <a href=\"https://vuejs.org/v2/guide/components.html\" target=\"_blank\" rel=\"noopener\">Components Basics</a> 稍微做個修改的範例，讓我們試著改成使用 Component 來看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;button-counter&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">      我被按了 &#123;&#123; count &#125;&#125; 下</span><br><span class=\"line\">    &lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;&#x2F;button-counter&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \tcount: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"做一個一樣功能的-component\"><a href=\"#做一個一樣功能的-component\" class=\"headerlink\" title=\"做一個一樣功能的 component\"></a>做一個一樣功能的 component</h2><hr>\n<p>使用方式如下：</p>\n<ol>\n<li>為了跟上面區別，所以定義一個名稱為 click-counter 的 component。</li>\n<li>建立 data， 必須是 function，並 return 值。</li>\n<li>建立 template，把原本 HTML 中的 template 放入。</li>\n<li>建立 methods，跟原本的 methods 一樣。</li>\n<li>HTML 只要留有跟 component 同名稱的元素就好。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;click-counter&#39;, &#123;</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  template: &#96;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">      我被按了 &#123;&#123; count &#125;&#125; 下</span><br><span class=\"line\">    &lt;&#x2F;button&gt;</span><br><span class=\"line\">  &#96;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;click-counter&gt;&lt;&#x2F;click-counter&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣的好處是可以讓建立好的 component 可以重複使用，如果你要一次擺 5 個，也是可以的，並且每個都是獨立運行的，想要試玩可以看下方 JSFiddle 建立的範例：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/87/embedded/js,html,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"透過-prop-傳遞建立-component\"><a href=\"#透過-prop-傳遞建立-component\" class=\"headerlink\" title=\"透過 prop 傳遞建立 component\"></a>透過 prop 傳遞建立 component</h2><hr>\n<p>如果想要從外層傳遞資料到內層來建立 component 的話，也就是透過原本的 <code>new Vue()</code> 建立的資料，而不是在 component 中取得資料的話，就可以透過 <code>props</code> 來存取。</p>\n<ol>\n<li>建立 <code>Vue.component(&#39;component 名稱&#39;, {})</code>。</li>\n<li>在 component 中建立 <code>template</code>。</li>\n<li>在 component 中建立 <code>props</code>，並定義它來獲取資料。</li>\n<li>在 HTML 的 component 中綁定 <code>props</code> 定義的名稱，並指定給 data 中的資料。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-plus </span><br><span class=\"line\">    :compo-count&#x3D; &#39;count&#39;  &#x2F;&#x2F; prop 綁定 count</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;component-plus&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-plus&#39;, &#123;</span><br><span class=\"line\">  props: [&#39;compoCount&#39;], &#x2F;&#x2F; 透過 prop 傳值</span><br><span class=\"line\">  template: &#96;</span><br><span class=\"line\">  \t&lt;button @click&#x3D;&quot;plus&quot;&gt;  </span><br><span class=\"line\">    \t我被按了 &#123;&#123; compoCount &#125;&#125; 下 &#x2F;&#x2F; template 中都要使用 props 的名稱，而不是原本的名稱</span><br><span class=\"line\">  \t&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &#96;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    plus: function() &#123;</span><br><span class=\"line\">      this.count +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用效果是一樣的：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/188/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p><strong>注意定義 props 時，命名方式按照官方說明最好使用 camelCase，在 HTML 中則是使用 kebab-case。</strong><br><strong>並且在定義時，應該盡量詳細，至少指定其類型。雖然這裡例子使用字串組成陣列可以使用，但如果定義詳細一點可以改成以下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">  \tcompoCount: String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-x-template-建立-component\"><a href=\"#使用-x-template-建立-component\" class=\"headerlink\" title=\"使用 x-template 建立 component\"></a>使用 x-template 建立 component</h2><hr>\n<p>在 Vue.js 中，還可以使用另一種方式來建立 component，這邊要介紹的是使用 x-template，這邊使用上面的例子來修改。</p>\n<ol>\n<li>建立 <code>Vue.component(&#39;component 名稱&#39;, {})</code>。 </li>\n<li>在 HTML 中建立一個 <code>&lt;script type=&quot;text/x-template&quot; id=&quot;id名稱&quot;&gt;</code>，id 將 template 引用過去。</li>\n<li>在 component 中建立 <code>template: &#39;#id名稱&#39;</code>，放入 id 名稱。</li>\n<li>在 component 中建立 <code>props</code>，並定義它來獲取資料。</li>\n<li>在 HTML 的 component 中綁定 <code>props</code> 定義的名稱，並指定給 data 中的資料。</li>\n<li>在 <code>&lt;script type=&quot;text/x-template&quot; id=&quot;id名稱&quot;&gt;</code> 中放入要顯示的 template。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-plus </span><br><span class=\"line\">    :compo-count&#x3D;&#39;count&#39;</span><br><span class=\"line\">  &gt;  </span><br><span class=\"line\">  &lt;&#x2F;component-plus&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;x-template&quot; id&#x3D;&quot;componentCount&quot;&gt;</span><br><span class=\"line\">\t&lt;button @click&#x3D;&quot;plus&quot;&gt;</span><br><span class=\"line\">  \t我被按了 &#123;&#123; compoCount &#125;&#125; 下</span><br><span class=\"line\">  &lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-plus&#39;, &#123;</span><br><span class=\"line\">\ttemplate: &#39;#componentCount&#39;,</span><br><span class=\"line\">  props: [&#39;compoCount&#39;],</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">  \tplus: function() &#123;</span><br><span class=\"line\">    \tthis.compoCount +&#x3D;1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">let vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\"> \tdata: &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>有些情況，例如 HTML 沒有辦法正確渲染元素時，等等的例子會提到，就可以使用 <code>is</code> 來掛載 template，像下方的例子：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div </span><br><span class=\"line\">  is&#x3D;&quot;component-plus&quot;</span><br><span class=\"line\">  :compo-count&#x3D;&#39;count&#39;</span><br><span class=\"line\">&gt;  </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>完成的效果也是一樣：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/06gb54hn/202/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"使用-x-template-顯示表格\"><a href=\"#使用-x-template-顯示表格\" class=\"headerlink\" title=\"使用 x-template 顯示表格\"></a>使用 x-template 顯示表格</h2><hr>\n<p>前面有提到有些情況下，HTML 會需要使用 <code>is</code> 來掛載顯示正確的畫面，這裏會使用表格的例子來說明。<br>下方有一個表格，接下來要試著使用 x-template 製作 component：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/2/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>跟前面提到的使用 x-template 的方法差不多，這邊就不再多做示範，直接上做好的樣子：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/8/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>結果出來的樣子跑版了。<br>打開開發者工具看一下，發現結構怪怪的，只有 4 個 <code>&lt;tr&gt;</code>。</p>\n<p><img src=\"https://i.imgur.com/8U0Yl27.png\" alt=\"Image\"></p>\n<p>原因是 HTML 的特性，在 <code>&lt;table&gt;</code> 中只能夠放 <code>&lt;tr&gt;</code>，但是這裏卻是放入 component 的模板，所以需要使用 <code>is</code> 來掛載。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;tbody&gt;</span><br><span class=\"line\">  &lt;!-- &lt;slam-dunk</span><br><span class=\"line\">    v-for&#x3D;&quot;(item, key) in data&quot; </span><br><span class=\"line\">    :character&#x3D;&quot;item&quot; </span><br><span class=\"line\">    :key&#x3D;&quot;key&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;slam-dunk&gt; --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 改成用 is 來掛載 tr --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;tr</span><br><span class=\"line\">    is&#x3D;&quot;slam-dunk&quot;</span><br><span class=\"line\">    v-for&#x3D;&quot;(item, key) in data&quot; </span><br><span class=\"line\">    :character&#x3D;&quot;item&quot; </span><br><span class=\"line\">    :key&#x3D;&quot;key&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  &lt;&#x2F;tr&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt;&#x2F;tbody&gt;</span><br></pre></td></tr></table></figure>\n\n<p>結構就變正常，資料也可以正確的顯示了。</p>\n<p><img src=\"https://i.imgur.com/PL2mzwI.png\" alt=\"Image\"></p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/11/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"全局註冊與局部註冊\"><a href=\"#全局註冊與局部註冊\" class=\"headerlink\" title=\"全局註冊與局部註冊\"></a>全局註冊與局部註冊</h2><hr>\n<h3 id=\"全局註冊\"><a href=\"#全局註冊\" class=\"headerlink\" title=\"全局註冊\"></a>全局註冊</h3><p>目前為止，我們都是使用全局註冊來製作 component：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-name&#39;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這樣做的話，如果之後有新創建 Vue 根實例 (<code>new Vue</code>) 的話，就會一起共用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(&#39;component-a&#39;, &#123;&#125;)</span><br><span class=\"line\">Vue.component(&#39;component-b&#39;, &#123;&#125;)</span><br><span class=\"line\">Vue.component(&#39;component-c&#39;, &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123; el: &#39;#app&#39; &#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;component-a&gt;&lt;&#x2F;component-a&gt;</span><br><span class=\"line\">  &lt;component-b&gt;&lt;&#x2F;component-b&gt;</span><br><span class=\"line\">  &lt;component-c&gt;&lt;&#x2F;component-c&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"局部註冊\"><a href=\"#局部註冊\" class=\"headerlink\" title=\"局部註冊\"></a>局部註冊</h3><p>根據<a href=\"https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\" target=\"_blank\" rel=\"noopener\">官網</a>表示，如果使用全局註冊，假設某個 component 不再使用的話，一樣會保留在最終的建構結果中，這樣會造成用戶無謂的下載 JavaScript 資料。<br>所以更好的用法，會是使用局部註冊：</p>\n<ol>\n<li>透過一個物件來定義 component：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var componentA &#x3D; &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 <code>new Vue</code> 中建立 <code>components</code> 並定義要使用的 component:</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;component-a&#39;: componentA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>把上面的範例改成局部註冊：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/5nj6xwvd/17/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<p>要注意的是，<strong>局部註冊的組件在其子組件中是不可用的</strong>。<br>如果想要讓 A 組件可以在 B 組件中使用的話，可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var componentA &#x3D; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var componentB &#x3D; &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    &#39;component-a&#39;: componentA</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["w3HexSchool","vue","component","prop","x-template"]},{"title":"全域環境與全域物件","url":"/bucky0112.github.io/2020/04/14/%E5%85%A8%E5%9F%9F%E7%92%B0%E5%A2%83%E8%88%87%E5%85%A8%E5%9F%9F%E7%89%A9%E4%BB%B6/","content":"<p>這一篇文章會提到全域環境與全域物件在瀏覽器中的執行。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"全域環境\"><a href=\"#全域環境\" class=\"headerlink\" title=\"全域環境\"></a>全域環境</h2><hr>\n<p>首先來執行個 JavaScript 檔案看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>等等，這是空的耶！沒寫任何東西也能執行嗎？</p>\n<p>首先在執行 JavaScript 時，會先創造<strong>全域執行環境</strong>，所謂的<strong>全域</strong>代表可以在任何地方取用它。</p>\n<p>而全域環境會創造 2 樣東西：</p>\n<ol>\n<li>全域物件</li>\n<li>特殊變數 - this</li>\n</ol>\n<h2 id=\"全域物件\"><a href=\"#全域物件\" class=\"headerlink\" title=\"全域物件\"></a>全域物件</h2><hr>\n<p>我們試著打開瀏覽器開發者工具的 console，雖然看起來沒東西</p>\n<p><img src=\"https://i.imgur.com/RmUrC0K.png\" alt=\"Image\"></p>\n<p>但是輸入 <code>this</code> 看看，可以發現明明沒有輸入任何程式碼，卻出現了 <strong>Window</strong> 這個物件</p>\n<p><img src=\"https://i.imgur.com/5hdiDvJ.png\" alt=\"\"></p>\n<p>而這個 window 物件，就是瀏覽器裡這個頁面的全域物件。</p>\n<p><strong>this</strong> 代表的是這個分頁，如果開另一份分頁，會有另一個全域物件。</p>\n<p>每一個視窗都會有自己的執行環境，和自己的全域物件。</p>\n<p>來看以下的範例，建立一個變數，並給它一個值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &quot;hello&quot;</span><br></pre></td></tr></table></figure>\n\n<p>這時候再打開 console ，輸入 <code>window</code> 看看。<br>可以看到裡面多了一個物件，名稱是 a，值是 “hello”。</p>\n<p><img src=\"https://i.imgur.com/iFQrtzH.png\" alt=\"\"></p>\n<p>由於創造變數時，變數不是在函式中，所以變數會和全域物件連結，這時的 a 就是全域物件。</p>\n<p>如果在瀏覽器運行，全域物件就是 window，還會得到一個特殊變數 this ，在使用瀏覽器的情況下， <strong>window = this</strong>。</p>\n<p>所以如果要找出 a 的話，就可以使用 <code>this.a</code>、<code>window.a</code>，或是直接輸入 <code>a</code>：</p>\n<p><img src=\"https://i.imgur.com/lcxigiR.png\" alt=\"Image\"></p>\n","categories":["JavaScript 的怪奇物語"],"tags":["javascript","全域環境","全域物件"]},{"title":"使用 Hexo 在 GitHub 部署 Blog","url":"/bucky0112.github.io/2020/03/28/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E9%83%A8%E7%BD%B2Blog/","content":"<p>本來一直不是很想用 Hexo，因為覺得很多人使用，所以有使用另一種 Hugo 來架設 Blog，但是用完一直覺得不合口味，原本打算就將就著用。</p>\n<p>剛好看到 Hexo 最多人使用的主題 - Next，感覺還不錯，真香，就來裝裝看吧！</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><hr>\n<p><strong>安裝需求</strong></p>\n<p>需要安裝：</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<blockquote>\n<p>以下方式為 Mac 使用者方法，其他作業系統請詳閱<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">官網</a></p>\n</blockquote>\n<ol>\n<li>安裝 Xcode</li>\n</ol>\n<p>首先到 App Store 安裝 Xcode，安裝完成後，<br>開啟它並前往 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安裝命令列工具。</p>\n<ol start=\"2\">\n<li>安裝 node.js</li>\n</ol>\n<p>使用 NVM，或是直接用 HomeBrew 安裝：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ brew install node</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安裝 Hexo：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>完成後可以輸入指令，看看有無安裝成功，成功的話會顯示版本：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>我的版本是：</p>\n<p>hexo: 4.2.0<br>hexo-cli: 3.1.0</p>\n<h2 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h2><hr>\n<p>在指定資料夾建立檔案：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>完成後會建立以下資料：</p>\n<p><img src=\"https://i.imgur.com/1eucaEQ.png\" alt=\"\"></p>\n<h2 id=\"更改主題與其他設定\"><a href=\"#更改主題與其他設定\" class=\"headerlink\" title=\"更改主題與其他設定\"></a>更改主題與其他設定</h2><hr>\n<p>主題選用的是 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">Next</a>，更改步驟如下：</p>\n<ol>\n<li>把 next 這個主題 clone 下來：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>找到 /_config.yml，打開修改：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: next    &#x2F;&#x2F; 改為 next</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>網站設定：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: 標題</span><br><span class=\"line\">subtitle: 副標題</span><br><span class=\"line\">description: 網站描述</span><br><span class=\"line\">keywords: 網站關鍵字</span><br><span class=\"line\">author: 作者名</span><br><span class=\"line\">language: zh-TW</span><br><span class=\"line\">timezone: 時區</span><br></pre></td></tr></table></figure>\n\n<p>其他一些細部設定就可以自己慢慢摸索。</p>\n<p>如果要先看看網站的樣式，可以啟動本地端的 server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"寫作\"><a href=\"#寫作\" class=\"headerlink\" title=\"寫作\"></a>寫作</h2><hr>\n<p>接下來，大概設定完就可以開始建立文章了。</p>\n<p>指令是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Layout 有 3 種，分別是：post、page(頁面)、draft(草稿)，</p>\n<p>假設要發一篇檔名為 Hello-World 草稿的話：<code>hexo new draft Hello-World</code></p>\n<p>如果要將 draft 發布為 post 的話，就鍵入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把網站部署到-GitHub\"><a href=\"#把網站部署到-GitHub\" class=\"headerlink\" title=\"把網站部署到 GitHub\"></a>把網站部署到 GitHub</h2><hr>\n<p>既然都做的差不多了，就可以開始把網站部署到 GitHub Pages。</p>\n<ol>\n<li><p>新增名為 <code>&lt;username&gt;.github.io</code> 的 repo，例如：<code>bucky0112.github.io</code></p>\n</li>\n<li><p>安裝 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a> 這個插件：</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>修改 /_config.yml：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">url: https:&#x2F;&#x2F;username.github.io</span><br><span class=\"line\">root: &#x2F;repo.github.io&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;repository url&gt; #新增repo的網址</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>上傳網站，執行：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>接著需要等待一些時間，讓子彈飛一會，就可以去你的網站看看成果了。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;username.github.io&#x2F;repo.github.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-常用指令\"><a href=\"#Hexo-常用指令\" class=\"headerlink\" title=\"Hexo 常用指令\"></a>Hexo 常用指令</h2><hr>\n<p>以下是之後再使用 Hexo 發佈文章時常用的指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate      #產生靜態檔案 &#x2F; hexo g</span><br><span class=\"line\">$ hexo deploy        #部署網站 </span><br><span class=\"line\">$ hexo server        #啟動本地端伺服器 &#x2F; hexo s</span><br><span class=\"line\">$ hexo new &lt;post&gt;    #新增文章</span><br><span class=\"line\">$ hexo clean         #清除快取檔案和已產生的靜態檔案</span><br></pre></td></tr></table></figure>","categories":["Hexo"],"tags":["hexo","next"]},{"title":"如何使用 Vue CLI 建置專案","url":"/bucky0112.github.io/2020/05/18/vue-cli/","content":"<p>Vue CLI 介紹與環境建置，以及建置專案。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Vue-CLI-是什麼？\"><a href=\"#Vue-CLI-是什麼？\" class=\"headerlink\" title=\"Vue CLI 是什麼？\"></a>Vue CLI 是什麼？</h2><hr>\n<p>之前所用到的 Vue.js 都是使用 CDN 載入的模式來開發，而 Vue CLI 有什麼不同呢？<br>它有以下幾點特色：</p>\n<ol>\n<li>基於 Webpack 所建置的開發工具。</li>\n<li>便於使用各種第三方套件 (Bootstrap, Vue Router…)。</li>\n<li>可運行 Sass、Bebal 等編譯工具。</li>\n<li>便於開發 SPA 的網頁工具。</li>\n<li>簡單設定，就能搭建開發常用環境。</li>\n</ol>\n<p>缺點：</p>\n<ul>\n<li>不便開發非 SPA 的網頁（改用 CDN 模式開發）。</li>\n</ul>\n<p>了解以上 Vue CLI 的優缺點後，就可以來試著安裝了，但是首先首要條件要先安裝 Node.js。</p>\n<h2 id=\"安裝-nvm-Node-Version-Manager\"><a href=\"#安裝-nvm-Node-Version-Manager\" class=\"headerlink\" title=\"安裝 nvm (Node Version Manager)\"></a>安裝 nvm (Node Version Manager)</h2><p>由於 JavaScript 只能在瀏覽器中運行，所以為了要讓 Vue CLI 能夠在電腦本地端運行，就需要 Node.js，所以先來安裝 Node.js。<br>而安裝 Node.js 最推薦的是採用 nvm 的方法，這樣之後可以方便切換不同版本。</p>\n<ul>\n<li>在終端機執行指令安裝：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.35.3&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後執行 <code>nvm --version</code> ，如果成功的話，就會顯示版本。<br>因為 nvm 可以控管 Node.js 的版本，所以可以執行指令觀看版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝-Node-js\"><a href=\"#安裝-Node-js\" class=\"headerlink\" title=\"安裝 Node.js\"></a>安裝 Node.js</h2><hr>\n<p><img src=\"https://i.imgur.com/slUd39w.png\" alt=\"顯示目前版本跟可以安裝的版本\"></p>\n<p>如果沒有要安裝特定版本的話，直接安裝最新穩定版本的 Node.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後，執行指令，確定是否安裝成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝-Vue-CLI\"><a href=\"#安裝-Vue-CLI\" class=\"headerlink\" title=\"安裝 Vue CLI\"></a>安裝 Vue CLI</h2><hr>\n<p>nvm 及 Node.js 都沒問題後，接著就使用 Node.js 的 npm 繼續安裝 Vue CLI。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>\n\n<p>安裝完後，檢查是否安裝成功，執行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue -V</span><br></pre></td></tr></table></figure>\n\n<p>成功的話，會顯示版本，目前最新版本為 4.3.1。</p>\n<h2 id=\"使用-Vue-CLI\"><a href=\"#使用-Vue-CLI\" class=\"headerlink\" title=\"使用 Vue CLI\"></a>使用 Vue CLI</h2><hr>\n<p>當安裝成功後，可以輸入 <code>vue</code>，會秀出可以輸入的指令。</p>\n<p><img src=\"https://i.imgur.com/qHXcEIX.png\" alt=\"Image\"></p>\n<h3 id=\"建製專案\"><a href=\"#建製專案\" class=\"headerlink\" title=\"建製專案\"></a>建製專案</h3><p>因為接下來要建置專案，所以先 cd 到想建置的資料夾中，然後執行 <code>vue create &lt;project name&gt;</code></p>\n<h3 id=\"專案設定\"><a href=\"#專案設定\" class=\"headerlink\" title=\"專案設定\"></a>專案設定</h3><p>建置並命名完專案後，就要接著設定，會有兩個選項可以選，分別有：</p>\n<ul>\n<li>default - 安裝基本套件。</li>\n<li>Manually - 按照需求選擇所需套件。（這邊選擇 Manually）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/IJZucYW.png\" alt=\"Image\"></p>\n<p>選擇 Manually 後，就可以選擇想要裝的套件，接著就開始安裝了。</p>\n<p><img src=\"https://i.imgur.com/M2Q71Y0.png\" alt=\"Image\"></p>\n<p>安裝一段時間後，出現以下的畫面，就代表安裝成功了。</p>\n<p><img src=\"https://i.imgur.com/9Wu4bru.png\" alt=\"Image\"></p>\n<p>接著照著它的指示，cd 到該資料夾中，執行 <code>npm run serve</code> 後，連到它提供的 localhost 網址，在瀏覽器看到下面的畫面，就代表專案建置成功了。</p>\n<p><img src=\"https://i.imgur.com/kfUEdi2.png\" alt=\"Image\"></p>\n","categories":["vue"],"tags":["w3HexSchool","vue","vue cli","node.js"]},{"title":"用 Vue.js 做一個 TodoList","url":"/bucky0112.github.io/2020/05/09/makeTodolistByVue/","content":"<p>很多教學都會試著做出 TodoList 來驗收自己學習的成果，這篇文章也不免俗的將會運用目前學到的 Vue 技術，做出一個簡易的 TodoList。 </p>\n<a id=\"more\"></a>\n\n<p>使用 Vue 來做 TodoList 真的蠻方便的，以前我覺得做這個好麻煩，用了 Vue 來做快上不少。<br>話不多說，先看成果：</p>\n<iframe width=\"100%\" height=\"300\" src=\"//jsfiddle.net/bucky0112/dcg2jzs4/5/embedded/js,html,css,result/dark/\" allowfullscreen=\"allowfullscreen\" allowpaymentrequest frameborder=\"0\"></iframe>\n\n<h2 id=\"建立-Vue-環境\"><a href=\"#建立-Vue-環境\" class=\"headerlink\" title=\"建立 Vue 環境\"></a>建立 Vue 環境</h2><hr>\n<p>首先在 HTML 頁面上建置一個 Vue 的環境，讓資料可以透過 Vue 渲染到 HTML。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>資料部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let vm &#x3D; new Vue (&#123;</span><br><span class=\"line\">\tel: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">  \ttitle: &#39;Simple TodoList&#39;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"輸入欄位雙向綁定\"><a href=\"#輸入欄位雙向綁定\" class=\"headerlink\" title=\"輸入欄位雙向綁定\"></a>輸入欄位雙向綁定</h2><hr>\n<ol>\n<li>新增一個 input 欄位，讓輸入的文字可以用 <code>v-model</code> 雙向綁定在 <code>inputNewTodo</code> 中，在 Vue 的資料中是一個空字串，讓輸入的文字可以塞入：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  title: &#39;Simple TodoList&#39;,</span><br><span class=\"line\">  inputNewTodo: &#39;&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;label&gt;輸入待辦事項：</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot;</span><br><span class=\"line\">    name&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">    placeholder&#x3D;&quot;請輸入事項&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>將輸入的文字可以即時顯示，加上 <code>v-if</code> 跟 <code>v-else</code> 的判斷條件，可以顯示不同狀態的文字：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showNewTodo&quot;&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;inputNewTodo!&#x3D;&#39;&#39;&quot;&gt;  &#x2F;&#x2F; 如果有東西就顯示</span><br><span class=\"line\">    你新增的待辦事項：&#123;&#123; inputNewTodo &#125;&#125;  &#x2F;&#x2F; 即時連動輸入的文字</span><br><span class=\"line\">  &lt;&#x2F;p&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">  &lt;p v-else&gt;  &#x2F;&#x2F; 如果是空字串就顯示</span><br><span class=\"line\">    尚未新增待辦事項。</span><br><span class=\"line\">  &lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"待辦事項\"><a href=\"#待辦事項\" class=\"headerlink\" title=\"待辦事項\"></a>待辦事項</h3><p>輸入一些待辦事項，首先用一些事項用 checkbox 看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;todos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    洗車</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    洗衣服</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class=\"line\">    玩森友會</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"QWjZyVJ\" src=\"https://codepen.io/bucky0112/embed/QWjZyVJ?height=265&theme-id=light&default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/QWjZyVJ' target=\"_blank\" rel=\"noopener\">QWjZyVJ</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>雖然資料有顯示出來，但是如果資料的部分用在 Vue 的 data 中會比較好管理，所以 HTML 的部份改成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;  &#x2F;&#x2F; 前面不一定要叫 item，todos 是資料來源</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">      type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">      :value&#x3D;&quot;item&quot; </span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>讓資料由 Vue 去做管理，新增一個 todos，讓 <code>v-for</code> 從裡面擷取資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">todos: [&#39;洗車&#39;, &#39;洗衣服&#39;, &#39;玩森友會&#39;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"已完成事項\"><a href=\"#已完成事項\" class=\"headerlink\" title=\"已完成事項\"></a>已完成事項</h3><p>前面做完待辦事項的資料，接著要做出如果打勾 checkbox 後，讓已勾選的資料可以渲染到已完成的空陣列。</p>\n<p>首先做一個空陣列：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">doneList: [],</span><br></pre></td></tr></table></figure>\n\n<p>然後要在待辦事項設置一個 <code>v-model</code>，讓點選的資料即時進入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;</span><br><span class=\"line\">    &lt;input </span><br><span class=\"line\">      type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">      :value&#x3D;&quot;item&quot;    &#x2F;&#x2F; 注意這邊要使用 v-bind 綁定 value</span><br><span class=\"line\">      v-model&#x3D;&quot;doneList&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &#123;&#123;item&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 template 的部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showDoneList&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;已完成事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;doneList!&#x3D;&#39;&#39;&quot;&gt;已辦完：&#123;&#123; doneList &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;尚未完成任何事項&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"讓輸入待辦事項透過點擊新增按鈕加入-todos-資料中\"><a href=\"#讓輸入待辦事項透過點擊新增按鈕加入-todos-資料中\" class=\"headerlink\" title=\"讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中\"></a>讓輸入待辦事項透過點擊新增按鈕加入 todos 資料中</h2><hr>\n<p>在 Vue 的資料中新增一個 <code>methods</code>，然後加入點擊新增資料的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  addNewList: function() &#123;</span><br><span class=\"line\">    this.todos.push(this.inputNewTodo)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著在 button 加上 <code>@click</code> 綁定 addNewList：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button @click&#x3D;&quot;addNewList&quot;&gt;新增&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣輸入新資料，然後點擊按鈕就可以將新資料帶入 todos 的陣列中了。<br>如果想做出輸入完資料，按 Enter 鍵也有一樣效果的話，就在輸入待辦事項的 input 欄位加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;label&gt;輸入待辦事項：</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; </span><br><span class=\"line\">    name&#x3D;&quot;inputNewTodo&quot; </span><br><span class=\"line\">    placeholder&#x3D;&quot;請輸入事項&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;inputNewTodo&quot;</span><br><span class=\"line\">    @keyup.enter&#x3D;&quot;addNewList&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">&lt;&#x2F;label&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"運用-computed-將已完成事項的-array-重新組裝字串\"><a href=\"#運用-computed-將已完成事項的-array-重新組裝字串\" class=\"headerlink\" title=\"運用 computed 將已完成事項的 array 重新組裝字串\"></a>運用 computed 將已完成事項的 array 重新組裝字串</h2><hr>\n<p>雖然點選待辦事項的 checkbox 可以將待辦事項加入到 doneList 的空陣列中，而且已完成事項也可以顯示資料。<br>但是顯示出來的不是想要的效果，如果只想要顯示陣列中的字串而已的話，該怎麼做呢？<br>這裡就可以使用 <code>computed</code>，在 Vue 的資料中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneListToString: function() &#123;</span><br><span class=\"line\">    return this.doneList.join(&#39;, &#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 template 部份，把原本已辦完 <code>已辦完：</code> 改成 computed 的函式名稱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showDoneList&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;已完成事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;p </span><br><span class=\"line\">    v-if&#x3D;&quot;doneList!&#x3D;&#39;&#39;&quot;</span><br><span class=\"line\">    class&#x3D;&quot;done&quot;</span><br><span class=\"line\">  &gt;已辦完：&#123;&#123; doneListToString &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt;尚未完成任何事項&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>就可以將選取的資料以字串加上 <code>,</code> 顯示。</p>\n<h2 id=\"運用-filters\"><a href=\"#運用-filters\" class=\"headerlink\" title=\"運用 filters\"></a>運用 filters</h2><hr>\n<p><code>filters</code> 可以將文字做成需要的格式處理，例如想要把待辦事項的各個事項前後加上 <code>|</code>。<br>先在 Vue 資料中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\">  doneListFormat: function(str) &#123;</span><br><span class=\"line\">    return &#96;| $&#123;str&#125; |&#96;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後在 template 部份，在原本 todos 中跑出 item 的後面加上 <code>filters</code> 的名稱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;showTodos&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;待辦事項：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;label v-for&#x3D;&quot;item in todos&quot;&gt;</span><br><span class=\"line\">  &lt;input </span><br><span class=\"line\">    type&#x3D;&quot;checkbox&quot;</span><br><span class=\"line\">    :value&#x3D;&quot;item&quot;</span><br><span class=\"line\">    v-model&#x3D;&quot;doneList&quot;</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">    &#123;&#123; item | doneListFormat &#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;label&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><hr>\n<p><code>watch</code> 這個功能可以即時的監聽某個值，如果發生變動就可以做某些事情。<br>例如當新增待辦事項時，可以跳出 alert，並表示已新增事項：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  todos: function() &#123;</span><br><span class=\"line\">    alert(&#39;已新增事項&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣當新增事項到 todos 中時，由於 todos 的資料變動，所以就會做出我們給的指令。<br><em>注意不要監聽 inputNewTodo，如果每輸入一個字就會一直跳 alert</em></p>\n<p>這邊還可以做一個運用，如果輸入待辦事項是空字串的話，就會跳 alert，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  todos: function() &#123;</span><br><span class=\"line\">    if(this.inputNewTodo &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">      alert (&#39;請輸入文字&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣當輸入的是空字串的話，就會跳 alert 提示請輸入文字。</p>\n<h2 id=\"加入一些其他功能\"><a href=\"#加入一些其他功能\" class=\"headerlink\" title=\"加入一些其他功能\"></a>加入一些其他功能</h2><hr>\n<h3 id=\"判斷輸入文字才能新增待辦事項\"><a href=\"#判斷輸入文字才能新增待辦事項\" class=\"headerlink\" title=\"判斷輸入文字才能新增待辦事項\"></a>判斷輸入文字才能新增待辦事項</h3><p>接著修改一些小 bug，由於新增待辦事項，如果沒輸入文字，直接按新增或是按 Enter 都可以新增到 todos 中，所以要在 addNewList 加入判斷，需要加入文字才能夠新增。</p>\n<p>還有加入新增事項後，將輸入欄位清空。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">addNewList: function() &#123;</span><br><span class=\"line\">  if(this.inputNewTodo &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">    alert(&#39;請輸入文字&#39;)  &#x2F;&#x2F; 如果輸入空字串就跳提示</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    this.todos.push(this.inputNewTodo);</span><br><span class=\"line\">    this.inputNewTodo &#x3D; &#39;&#39;  &#x2F;&#x2F; 清空輸入欄位</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刪除所有事項\"><a href=\"#刪除所有事項\" class=\"headerlink\" title=\"刪除所有事項\"></a>刪除所有事項</h3><p>最後如果想刪除所有事項的話，我再加入一個刪除的按鈕，並在 <code>methods</code> 新增並綁定它，就完成了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deleteAllTodos: function() &#123;</span><br><span class=\"line\">  this.todos &#x3D; [];</span><br><span class=\"line\">  this.doneList &#x3D; []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><hr>\n<p>其他一些東西還有再做一些修改，有微調或是去掉，例如：<code>watch</code>。<br>新增事項成功就跳 alert 有點惱人，後來改成監聽如果完成，好像也不太適合，於是就關掉 <code>watch</code> 了。</p>\n<p>其他如果有想到其他東西可以再想辦法加進去，例如 localStorage。</p>\n","categories":["vue"],"tags":["w3HexSchool","vue","todolist"]},{"title":"JS 基礎回顧 - 全域變數與區域變數","url":"/bucky0112.github.io/2020/04/23/%E5%85%A8%E5%9F%9F%E8%AE%8A%E6%95%B8%E8%88%87%E5%8D%80%E5%9F%9F%E8%AE%8A%E6%95%B8/","content":"<p>在上一篇 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/10/JS%E5%9F%BA%E7%A4%8E%E5%9B%9E%E9%A1%A7-%E8%AE%8A%E6%95%B8%E8%88%87%E8%B3%87%E6%96%99%E5%9E%8B%E6%85%8B/#more\">變數與資料型別</a> 中有介紹到變數，而變數還分為全域變數與區域變數，本篇將會介紹兩者的差異。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"區域變數\"><a href=\"#區域變數\" class=\"headerlink\" title=\"區域變數\"></a>區域變數</h2><hr>\n<p>首先用個函式來算一下梯形的面積：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40))  &#x2F;&#x2F; 印出 &quot;梯形面積是1400&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上面的這一段沒什麼問題，如果在後面再加上一段 <code>console.log(result)</code> 的話，會發生什麼事？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));</span><br><span class=\"line\">console.log(result)</span><br></pre></td></tr></table></figure>\n\n<p>結果第二個 console 會出現錯誤，錯誤訊息是 <strong>result is not defined</strong>。<br>為什麼找不到 result 呢？<br>首先要先了解一個原則，變數的最小有效區域只在函式中。<br>而在這個例子中，在函式裡透過 var 指定變數，第一個 console 執行完以後，變數就被用掉消失了，第二個 console 當然就找不到。<br>以上是一個區域變數的範例，而區域變數的好處是執行完後變數就會消失，可以節省記憶體。</p>\n<h2 id=\"全域變數\"><a href=\"#全域變數\" class=\"headerlink\" title=\"全域變數\"></a>全域變數</h2><hr>\n<p>接著來看看在函式裡沒有透過 var 來宣告變數會怎樣。<br>在上面提到區域變數的範例中，原本第二個 console 不能執行。<br>那麼把 var 拿掉後：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 1400</span><br></pre></td></tr></table></figure>\n\n<p>結果第二個 console 可以執行了！？</p>\n<p>這是因為<strong>如果不是由 var 宣告的變數，都會是全域變數。</strong><br>所以即使變數 result 是在函式中宣告，但是因為沒有透過 var，所以一樣是全域變數。<br>而不在函式裡的變數，會一直都在。雖然一直都在可以隨時存取，但是這樣做比較浪費記憶體。<br>所以除非必要，否則在函式內的變數，都盡量透過 var 來宣告。</p>\n<p>來看看如果計算梯形面積的函式，想要執行第二個 console 的話，還有以下方法：</p>\n<h3 id=\"透過-var-宣告變數，但不給值\"><a href=\"#透過-var-宣告變數，但不給值\" class=\"headerlink\" title=\"透過 var 宣告變數，但不給值\"></a>透過 var 宣告變數，但不給值</h3><p>在函式前再透過 var 宣告變數，但不給值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var result;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 1400</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果是兩個變數都透過-var-宣告會是如何？\"><a href=\"#如果是兩個變數都透過-var-宣告會是如何？\" class=\"headerlink\" title=\"如果是兩個變數都透過 var 宣告會是如何？\"></a>如果是兩個變數都透過 var 宣告會是如何？</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var result;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure>\n\n<p>第一個 console 一樣可以得到 “梯形面積是1400”，而第二個則是得到 undefined。<br>由於變數在函式中，以及透過 var 來宣告，所以符合區域變數的規範。<br>所以第一個 console 執行完，雖然最前面有透過 var 宣告變數，是一個全域變數，但是並沒有值，所以是 undefined。</p>\n<p>這時候如果給它值，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var result &#x3D; 500;</span><br><span class=\"line\"></span><br><span class=\"line\">function areaTr (upBase, downBase, height) &#123;</span><br><span class=\"line\">  var result &#x3D; (upBase + downBase) * height &#x2F; 2;</span><br><span class=\"line\">  return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;梯形面積是&#39; + areaTr(30, 40, 40));  &#x2F;&#x2F; &quot;梯形面積是1400&quot;</span><br><span class=\"line\">console.log(result)                            &#x2F;&#x2F; 500</span><br></pre></td></tr></table></figure>\n\n<p>基本上透過 var 來宣告，這兩個變數就可以視為兩個不同的東西了，要直接改變數的名字也印的出來結果。</p>\n<h2 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h2><hr>\n<p>提升 (hoisting) 在 JavaScript 中又是一個坑。這在後面的一篇會提到，這邊則是稍微講一下。</p>\n<p>在一般的情形下，執行以下的程式碼，其結果會是2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>那麼如果在變數的前面也加上 <code>console.log</code> 呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(a);</span><br><span class=\"line\">var a &#x3D; 2;</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n\n<p>結果會是 <code>undefined</code> 跟 <code>2</code>，原因是 JavaScript 在執行時會是一行一行的執行，所以在執行第一行時找不到 a ，所以會是 undefined。</p>\n<p>那麼在 function 中作這樣的事會是怎樣呢？<br>把呼叫執行的 <code>hi()</code> 放在 function 的前面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hi();</span><br><span class=\"line\"></span><br><span class=\"line\">function hi() &#123;</span><br><span class=\"line\">  console.log(&#39;hello&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果一樣可以印出 <code>hello</code>！！！<br>這是因為在 JavaScript 中，function 會優先執行，所以會作一個 hoisting，所以一樣可以執行。<br><em>但最好還是不要這樣作</em></p>\n","categories":["JS 基礎回顧"],"tags":["全域變數","區域變數"]},{"title":"JS 基礎回顧 - DOM","url":"/bucky0112.github.io/2020/05/20/js-review-dom/","content":"<p>想像一下在夾娃娃機中，我們操作著爪子，在機台中抓取我們想要的東西。<br>而這樣的概念，有點像是我們要怎麼樣來藉由 JavaScript 操作網頁畫面的 HTML 元素，文件物件模型（Document Object Model, DOM）就可以幫助我們來做這件事。</p>\n<a id=\"more\"></a>\n\n<p>那麼我們有哪些爪子可以使用呢？<br>一般常使用的有：</p>\n<ul>\n<li><code>getElementById()</code></li>\n<li><code>getElmentsByClassName()</code></li>\n<li><code>querySelector()</code></li>\n<li><code>querySelectorAll()</code></li>\n</ul>\n<p>下方有兩塊 div，如果想改變它們的文字內容的話，就可以透過 DOM 來操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-1&quot;&gt;娃娃1&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-2&quot;&gt;娃娃2&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>來看看個別使用的方法：</p>\n<h2 id=\"getElementById\"><a href=\"#getElementById\" class=\"headerlink\" title=\"getElementById()\"></a>getElementById()</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">document.getElementById(&#39;doll-1&#39;).textContent &#x3D; &#39;彌豆子&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">var tanjiro &#x3D; document.getElementById(&#39;doll-2&#39;);</span><br><span class=\"line\">tanjiro.innerHTML &#x3D; &#39;炭治郎&#39;</span><br></pre></td></tr></table></figure>\n\n<p>可以透過 <code>document.getElementById(&#39;ID名稱&#39;)</code> 再接 <code>textContent</code> 或是 <code>innerHTML</code> 去變更文字。<br>或是宣告一個變數，指定為 <code>document.getElementById(&#39;ID名稱&#39;)</code>，再使用變數接 <code>textContent</code> 或是 <code>innerHTML</code> 去變更文字。</p>\n<h2 id=\"getElmentsByClassName\"><a href=\"#getElmentsByClassName\" class=\"headerlink\" title=\"getElmentsByClassName()\"></a>getElmentsByClassName()</h2><hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var allDolls &#x3D; document.getElementsByClassName(&#39;doll&#39;);</span><br><span class=\"line\">var length &#x3D; allDolls.length;</span><br><span class=\"line\">for (var i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">  allDolls[i].textContent &#x3D; &#39;炭治郎&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>getElmentsByClassName()</code> 的用法就不太一樣，是用在一次改變全部相同的元素。</p>\n<p>上面的是比較早期的作法，接下來的兩種方法是比較現代大部分在使用的。</p>\n<h2 id=\"querySelector\"><a href=\"#querySelector\" class=\"headerlink\" title=\"querySelector()\"></a>querySelector()</h2><hr>\n<p>跟 <code>getElementById()</code> 方法類似，只是選取的方式不太一樣，<code>querySelector()</code> 在選擇 ID 的時候比較像 CSS 的類別選取器的方式，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var nezuko &#x3D; document.querySelector(&#39;#doll-1&#39;);</span><br><span class=\"line\">nezuko.textContent &#x3D; &#39;彌豆子&#39;</span><br></pre></td></tr></table></figure>\n\n<p>像這樣就可以將原本的內容改為想要的文字。</p>\n<h2 id=\"querySelectorAll\"><a href=\"#querySelectorAll\" class=\"headerlink\" title=\"querySelectorAll()\"></a>querySelectorAll()</h2><hr>\n<p>跟 <code>getElmentsByClassName()</code> 差不多的用法，這次把 <code>&lt;span&gt;</code> 中改成想要的文字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-1&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;div class &#x3D; &quot;doll&quot; id &#x3D; &quot;doll-2&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var tanjiro &#x3D; document.querySelectorAll(&#39;.doll span&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (var i&#x3D;0; i&lt;tanjiro.length; i++) &#123;</span><br><span class=\"line\">  tanjiro[i].textContent &#x3D; &#39;炭治郎&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就可以把全部同名的 class 改成想要的文字。</p>\n<p>如果想透過 <code>getElmentsByClassName()</code> 把兩個不同的 class 改成個別不同的內容的話，也是辦得到的，但先來看一下是怎麼做到的。</p>\n<p>用 <code>console.log(tanjiro)</code> 看一下用 <code>getElmentsByClassName()</code> 控制的 DOM 會是什麼內容？</p>\n<p><img src=\"https://i.imgur.com/lK7RzsV.png\" alt=\"Image\"></p>\n<p>結果會出現陣列，所以這樣就可以用控制陣列的方式來改變該筆內容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var tanjiro &#x3D; document.querySelectorAll(&#39;.doll span&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">tanjiro[0].textContent &#x3D; &#39;竈門&#39;;</span><br><span class=\"line\">tanjiro[1].textContent &#x3D; &#39;炭治郎&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"練習用-DOM-來做一個-BMI-計算機\"><a href=\"#練習用-DOM-來做一個-BMI-計算機\" class=\"headerlink\" title=\"練習用 DOM 來做一個 BMI 計算機\"></a>練習用 DOM 來做一個 BMI 計算機</h2><hr>\n<p>目前已經知道如何使用 DOM 來操作網頁的元素了，那麼就試著做出一個 BMI 計算機。<br>下方是做出來的成品：</p>\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"BMI 計算機 (DOM 練習)\" src=\"https://codepen.io/bucky0112/embed/xxwBxKV?height=265&theme-id=dark&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/bucky0112/pen/xxwBxKV' target=\"_blank\" rel=\"noopener\">BMI 計算機 (DOM 練習)</a> by Bucky Chu\n  (<a href='https://codepen.io/bucky0112' target=\"_blank\" rel=\"noopener\">@bucky0112</a>) on <a href='https://codepen.io' target=\"_blank\" rel=\"noopener\">CodePen</a>.\n</iframe>\n\n<p>HTML 部份：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;BMI 計算機&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;inputData&quot;&gt;</span><br><span class=\"line\">  &lt;label for&#x3D;&quot;bodyHeight&quot;&gt;身高&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;bodyHeight&quot; min&#x3D;&quot;0&quot;&gt;公分</span><br><span class=\"line\">  &lt;label for&#x3D;&quot;bodyWeight&quot;&gt;體重&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;number&quot; id&#x3D;&quot;bodyWeight&quot; min&#x3D;&quot;0&quot;&gt;公斤</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;計算&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h2&gt;BMI值：&lt;&#x2F;h2&gt;</span><br><span class=\"line\">&lt;p id&#x3D;&quot;calResult&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;span id&#x3D;&quot;bmiResult&quot;&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"綁定輸入欄位\"><a href=\"#綁定輸入欄位\" class=\"headerlink\" title=\"綁定輸入欄位\"></a>綁定輸入欄位</h3><p>首先思考如何做出當按下計算按鈕時，能夠將輸入的資料給顯示出來。</p>\n<p>先在按鈕部份加上一個事件（事件部份之後會再提到），這裏用到的是 <code>onclick</code>，並綁定一個 function，可以做呼叫並做裡面的動作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;計算&quot; onclick&#x3D;&quot;getBody()&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接著要讓輸入的資料能夠顯示，先試著讓輸入的資料用 <code>alert</code> 顯示看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getBody() &#123;</span><br><span class=\"line\">  var height &#x3D; document.querySelector(&quot;#bodyHeight&quot;).value;</span><br><span class=\"line\">  var weight &#x3D; document.querySelector(&quot;#bodyWeight&quot;).value;</span><br><span class=\"line\">  alert(height + weight)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有顯示資料，但是變成字串相加，所以要讓資料變成數字。</p>\n<h3 id=\"個別函式處理資料\"><a href=\"#個別函式處理資料\" class=\"headerlink\" title=\"個別函式處理資料\"></a>個別函式處理資料</h3><p>再用一個 function 去處理資料，並帶入 BMI 計算公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function bmiCal(height, weight) &#123;</span><br><span class=\"line\">  var h &#x3D; parseInt(height) &#x2F; 100;  &#x2F;&#x2F; parseInt() 資料轉成數字</span><br><span class=\"line\">  var w &#x3D; parseInt(weight);</span><br><span class=\"line\">  return (w &#x2F; (h * h)).toFixed(1); &#x2F;&#x2F; toFixed(1) 算到小數點第 1 位</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著再 <code>alert</code> 一次：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function getBody() &#123;</span><br><span class=\"line\">  var height &#x3D; document.querySelector(&quot;#bodyHeight&quot;).value;</span><br><span class=\"line\">  var weight &#x3D; document.querySelector(&quot;#bodyWeight&quot;).value;</span><br><span class=\"line\">  alert(bmiCal(height, weight))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這次就可以顯示算出的數字了。</p>\n<h3 id=\"讓-BMI-值顯示在網頁上\"><a href=\"#讓-BMI-值顯示在網頁上\" class=\"headerlink\" title=\"讓 BMI 值顯示在網頁上\"></a>讓 BMI 值顯示在網頁上</h3><p>既然可以算出資料，接著就讓資料顯示出來。<br>在 <code>getBody()</code> 中綁定 DOM，並讓資料透過 <code>textContent</code> 顯示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var calResult &#x3D; document.querySelector(&quot;#calResult&quot;);</span><br><span class=\"line\">calResult.textContent &#x3D; bmiCal(height, weight);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加入條件顯示是否正常\"><a href=\"#加入條件顯示是否正常\" class=\"headerlink\" title=\"加入條件顯示是否正常\"></a>加入條件顯示是否正常</h3><p>都有計算結果就可以在上面做出其他的效果，這邊讓計算結果符合以下條件：<br>如果超過 24 就顯示過胖，低於 18.5 顯示過瘦，其他就正常，就可以這樣寫：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var bmiResult &#x3D; document.querySelector(&quot;#bmiResult&quot;);</span><br><span class=\"line\">if (bmiCal(height, weight) &gt; 24) &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;過胖&quot;;</span><br><span class=\"line\">  &#125; else if (bmiCal(height, weight) &lt; 18.5) &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;過瘦&quot;;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    bmiResult.textContent &#x3D; &quot;正常&quot;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判斷是否輸入資料\"><a href=\"#判斷是否輸入資料\" class=\"headerlink\" title=\"判斷是否輸入資料\"></a>判斷是否輸入資料</h3><p>如果沒有輸入資料的話，在這樣計算結果會出錯，所以要加入判斷式，判斷是否有輸入資料：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (height !&#x3D;&#x3D; &quot;&quot; &amp;&amp; weight !&#x3D;&#x3D; &quot;&quot;) &#123;</span><br><span class=\"line\">    calResult.textContent &#x3D; bmiCal(height, weight);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    alert(&quot;請輸入資料&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JS 基礎回顧"],"tags":["w3HexSchool","javascript","DOM"]},{"title":"基礎 Vue.js(上)","url":"/bucky0112.github.io/2020/03/30/%E5%9F%BA%E7%A4%8E%20Vue.js-1/","content":"<p>身為目前 3 大前端應用框架之一的 Vue.js，截至目前為止在 GitHub 已經累積 160k 的星星數，以下是個人的學習筆記。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"開發環境\"><a href=\"#開發環境\" class=\"headerlink\" title=\"開發環境\"></a>開發環境</h2><hr>\n<p>在 <a href=\"https://cn.vuejs.org/v2/guide/installation.html\" target=\"_blank\" rel=\"noopener\">Vue.js官網</a> 中建議在瀏覽器上安裝 <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a>，這樣可以方便在瀏覽器中觀看訊息。</p>\n<p>在 <code>&lt;script&gt;</code> 中直接載入 Vue 的檔案，在官網有提供各式檔案來源可供存取，要注意的是如果在開發環境下，建議使用開發版本，這樣會提供完整的警告訊息，方便開發者去查閱問題來源。</p>\n<h2 id=\"應用程式建立\"><a href=\"#應用程式建立\" class=\"headerlink\" title=\"應用程式建立\"></a>應用程式建立</h2><hr>\n<p>首先在 HTML 建立一個 <code>div</code> ，這邊可以使用 id 或是 class，一般建議是使用 id，</p>\n<p>接著在 <code>&lt;script&gt;</code> 中輸入建立 Vue 的起手式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然後打開瀏覽器的開發人員工具，如果有安裝  <a href=\"https://github.com/vuejs/vue-devtools#vue-devtools\" target=\"_blank\" rel=\"noopener\">Vue Devtools</a> 就可以看到已經建立了一個 Root</p>\n<p><img src=\"https://i.imgur.com/01jwjmg.png\" alt=\"\"></p>\n<p>如果要建立資料的話，然後顯示在 HTML 上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 建立完data，想要顯示message的話，在 &#123;&#123; &#125;&#125; 中放入名稱就可以顯示 --&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F; 建立data，裡面可以存放資料，例如 message</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#39;Hello World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意事項： 一個頁面可以同時建立 2 個 app，但是 3 個就沒辦法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app2&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;message&#125;&#125; </span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">  var app2 &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;app2&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;World&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>建立兩個是可以的，一樣會出現 2 個 Root</p>\n<p><img src=\"https://i.imgur.com/BYN501c.png\" alt=\"\"></p>\n<p>但是如果建立 3 個 app，就會出現找不到 element</p>\n<p><img src=\"https://i.imgur.com/eyWxDkg.png\" alt=\"\"></p>\n<h2 id=\"雙向綁定的資料\"><a href=\"#雙向綁定的資料\" class=\"headerlink\" title=\"雙向綁定的資料\"></a>雙向綁定的資料</h2><p>在 Vue 中，有雙向綁定的特色，</p>\n<p>前面提到如果要將資料顯示在網頁上，可以使用 <code>{{  }}</code> 這個語法，在 Vue 的語法中還有其他可以使用的：</p>\n<ul>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n</ul>\n<h3 id=\"v-model-的使用\"><a href=\"#v-model-的使用\" class=\"headerlink\" title=\"v-model 的使用\"></a>v-model 的使用</h3><p>主要是使用在：</p>\n<ul>\n<li><code>&lt;input&gt;</code></li>\n<li><code>&lt;select&gt;</code></li>\n<li><code>&lt;textarea&gt;</code></li>\n<li>components</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;Hello&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上 <code>&lt;text&gt;</code> 跟 <code></code> 就會顯示一樣的內容</p>\n<p><img src=\"https://i.imgur.com/bwOOIxu.png\" alt=\"\"></p>\n<p>而當直接在畫面修改 <code>&lt;text&gt;</code> 輸入欄中的內容時，<code></code>也會一起改變。</p>\n<p><img src=\"https://i.imgur.com/NvbXPV9.png\" alt=\"\"></p>\n<h3 id=\"v-text-跟-v-html-使用的方法\"><a href=\"#v-text-跟-v-html-使用的方法\" class=\"headerlink\" title=\"v-text 跟 v-html 使用的方法\"></a>v-text 跟 v-html 使用的方法</h3><p>兩者差不多，都可以直接顯示內容，差別在 <code>v-html</code> 可以加入 html 標籤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt;</span><br><span class=\"line\">  &lt;div v-text&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div v-html&#x3D;&quot;message&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tmessage: &#39;&lt;h1&gt;Hello&lt;&#x2F;h1&gt;&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在畫面上的呈現是這樣：</p>\n<p><img src=\"https://i.imgur.com/Rhr0U3R.png\" alt=\"\"></p>\n","categories":["vue"],"tags":["javascript","vue"]},{"title":"基礎 Vue.js(中)","url":"/bucky0112.github.io/2020/03/30/%E5%9F%BA%E7%A4%8EVue-js-2/","content":"<p>此篇會講到關於 MVVM 的概念、綁定、for 迴圈及判斷，還有行為 on 的使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"MVVM-的概念\"><a href=\"#MVVM-的概念\" class=\"headerlink\" title=\"MVVM 的概念\"></a>MVVM 的概念</h2><hr>\n<p>首先要先提到傳統 MVC 的概念，</p>\n<p>在 Web 應用程式的劃分分為：</p>\n<ul>\n<li>模型（Model）</li>\n<li>視圖（View）</li>\n<li>控制器（Controller）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/lmb7P7R.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自 TechTerms.com</p>\n</blockquote>\n<p>使用者第一眼看到的就是 View，如果使用者想要取得某些資料，這時 View 會發送請求給 Controller，然後 Controller 會請 Model 找出資料，Model 就會另外在資料庫找出資料，Model 取得資料後，再回傳給 Controller，Controller 再呈現出畫面在 View 上。</p>\n<h3 id=\"那麼-MVVM-又是什麼概念？\"><a href=\"#那麼-MVVM-又是什麼概念？\" class=\"headerlink\" title=\"那麼 MVVM 又是什麼概念？\"></a>那麼 MVVM 又是什麼概念？</h3><p>View 跟 ViewModel 是綁定的，如果使用者想要取得資料，View 會直接請求給 Model，然後 Model 透過 Database 找到資料再回傳給 ViewModel，會直接即時顯示在 View 上。</p>\n<p><img src=\"https://i.imgur.com/hYs0zLQ.png\" alt=\"\"></p>\n<blockquote>\n<p>圖片來自維基百科</p>\n</blockquote>\n<h3 id=\"所以-Vue-js-跟-一般-JavaScript-有什麼不同？\"><a href=\"#所以-Vue-js-跟-一般-JavaScript-有什麼不同？\" class=\"headerlink\" title=\"所以 Vue.js 跟 一般 JavaScript 有什麼不同？\"></a>所以 Vue.js 跟 一般 JavaScript 有什麼不同？</h3><p>一般 JavaScript 在處理畫面上是直接操作 Dom 元素</p>\n<p>而 Vue.js 是以資料狀態操作 Dom 元素時，是以資料狀態去變動。</p>\n<h2 id=\"v-bind-動態屬性指令\"><a href=\"#v-bind-動態屬性指令\" class=\"headerlink\" title=\"v-bind 動態屬性指令\"></a>v-bind 動態屬性指令</h2><hr>\n<p>上面提到 Vue.js 是以資料狀態去變動，這邊要來實際操作一下如何載入圖片：</p>\n<p><code>&lt;img v-bind:src=&quot;imageSrc&quot;&gt;</code></p>\n<p>縮寫</p>\n<p><code>&lt;img :src=&quot;imageSrc&quot;&gt;</code></p>\n<p>以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 綁定一個屬性src --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以讓圖片顯示出來了</p>\n<iframe src=\"https://codepen.io/bucky0112/embed/KKpyXJB?height=361&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n\n<p>不過圖片似乎太大，所以還可以改小一點</p>\n<p>這邊使用 Bootstrap 的 <code>.img-fluid</code> ，讓圖片設定為響應式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">  &lt;!-- 多綁定一個屬性class --&gt;</span><br><span class=\"line\">  &lt;img v-bind:src&#x3D;&quot;imgSrc&quot; v-bind:class&#x3D;&quot;className&quot;&gt; </span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;, </span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \timgSrc: &#39;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1529778873920-4da4926a72c2?ixlib&#x3D;rb-1.2.1&amp;ixid&#x3D;eyJhcHBfaWQiOjEyMDd9&amp;auto&#x3D;format&amp;fit&#x3D;crop&amp;w&#x3D;1576&amp;q&#x3D;80&#39;,</span><br><span class=\"line\">    \tclassName: &#39;img-fluid&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;scripy&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/wvaPPXQ?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"v-if-及-v-for\"><a href=\"#v-if-及-v-for\" class=\"headerlink\" title=\"v-if 及 v-for\"></a>v-if 及 v-for</h2><hr>\n<p>這邊的 data 中有一組陣列屬於 JSON 格式，要運用 <code>v-for</code> 讓它顯示在畫面上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    list: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;小明&quot;,</span><br><span class=\"line\">        age: 16</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;媽媽&quot;,</span><br><span class=\"line\">        age: 38</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &quot;漂亮阿姨&quot;,</span><br><span class=\"line\">        age: 24</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這邊有一個語法 <code>&lt;pre&gt;&lt;/pre&gt;</code>，可以讓內容先在頁面上顯示出來，以方便開發者觀看。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;pre&gt;&#123;&#123;list&#125;&#125;&lt;&#x2F;pre&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要讓全部的資料使用 for 迴圈跑出來，在 Vue 的方式是用 <code>v-for</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;!-- item可以使用任意名稱 --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;item in list&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>會顯示</p>\n<ul>\n<li>小明的年齡是 16</li>\n<li>媽媽的年齡是 38</li>\n<li>漂亮阿姨的年齡是 24</li>\n</ul>\n<p>如果想要顯示每一個 <code>li</code> 在陣列中索引是第幾個</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">      &lt;!-- (陣列的值, 陣列的索引) --&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot;&gt;</span><br><span class=\"line\">      &lt;!-- 索引是從 0 開始，如果要從 1 開始顯示要記得加 1 --&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果要顯示大於 24 的資料的話，可以使用判斷式 <code>v-if</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &lt;li v-for&#x3D;&quot;(item, index) in list&quot; v-if&#x3D;&quot;item.age &gt; 24&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;index + 1&#125;&#125; - &#123;&#123;item.name&#125;&#125;的年齡是 &#123;&#123;item.age&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/BaNmJaE?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"利用-v-on-來操作行為\"><a href=\"#利用-v-on-來操作行為\" class=\"headerlink\" title=\"利用 v-on 來操作行為\"></a>利用 v-on 來操作行為</h2><hr>\n<p>在 jQuery 中，如果要操作行為的話，會使用 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(selector).on(events, function () &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而在 Vue 中，方法差不多，採用的是 <code>v-on</code>，範例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- v-on:click 可以使用縮寫成 @click --&gt;</span><br><span class=\"line\">&lt;button v-on:click&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這邊做一個反轉文字的練習</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:keyup.enter，綁定鍵盤按Enter事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot; v-on:keyup.enter&#x3D;&quot;reverseText&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 用v-on:click綁定點擊事件到reverseText這個function --&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 反轉文字的語法 split(&quot;&quot;).reverse().join(&quot;&quot;)</span><br><span class=\"line\">    \t\t&#x2F;&#x2F; 當點擊按鈕後啟動function，this.newText顯示內容</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>重點 1：這邊控制資料要加上 “this”，像是 “this.newText”，沒有的話就不會顯示。</p>\n</blockquote>\n<blockquote>\n<p>重點 2 : 預先定義資料狀態很重要，如果 data 中的資料沒有先定義好，會發生錯誤</p>\n</blockquote>\n<iframe src=\"https://codepen.io/bucky0112/embed/abOEdRq?height=265&theme-id=dark&default-tab=js,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>","categories":["vue"],"tags":["javascript","vue"]},{"title":"執行環境：創造與提升","url":"/bucky0112.github.io/2020/04/24/%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-%E5%89%B5%E9%80%A0%E8%88%87%E6%8F%90%E5%8D%87/","content":"<p>在 JavaScript 中，提升（Hoisting）可能是最奇怪的部份了，這個部份還滿容易搞混的，不過希望我整理出來的筆記能夠幫助釐清觀念，如果有錯的部分麻煩請告知我。</p>\n<a id=\"more\"></a>\n\n<p>首先看一段程式碼，然後看會發生什麼事：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);</span><br><span class=\"line\">b()</span><br></pre></td></tr></table></figure>\n\n<p>上面的程式碼沒有意外的出現 <code>Hello World</code> 及 <code>Test</code>。<br>如果把第 8 跟第 9 行移到最上面的話，會發生什麼事呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(a); &#x2F;&#x2F; undefined</span><br><span class=\"line\">b();            &#x2F;&#x2F; &quot;Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a &#x3D; &#39;Hello World&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>結果沒有出現錯誤，而是得到一個值 undefined，另一個函式則是成功執行。<br>這在其他大部分程式語言是沒有辦法執行的，但是在 JavaScript 卻可以執行（至少我在 Ruby 試過不行），<br>而這個現象叫做提升 (Hoisting)。</p>\n<p>這個現象並不是說真的把你的程式碼移到最上面，而是在一行一行執行程式碼之前，JavaScript 會先做一次預編譯，為了變數和函式在記憶體中建立一個空間，所以當程式碼被逐行執行時，就可以馬上找到它們。</p>\n<p>那麼為什麼變數跟函式得到的結果不同呢？</p>\n<p>這是因為所有 JavaScript 的變數，<strong>在一開始都會被設定為 undefined</strong>，表示不知道它的值，就算不設值的話，也是一樣得到 undefined。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(a); &#x2F;&#x2F; undefined</span><br><span class=\"line\">b();            &#x2F;&#x2F; &quot;Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var a;</span><br><span class=\"line\"></span><br><span class=\"line\">function b() &#123;</span><br><span class=\"line\">  console.log(&#39;Test&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在程式碼在第一行發現 a 沒有值，就直接給 undefined。</p>\n<p>函式不同的是，前面有說到，執行前會做一次預編譯，在這過程中，定義式函式會優先執行，會被完全設定好放在記憶體中，等到執行時發現這裏有一個函式，在記憶體已經有值了，於是可以馬上讀取。</p>\n<p>雖然 JavaScript 有提升這個特性，但是還是建議要用到的變數，還是盡可能地在上面宣告再使用。</p>\n","categories":["JavaScript 的怪奇物語"],"tags":["javascript","hoisting"]},{"title":"基礎 Vue.js(下)","url":"/bucky0112.github.io/2020/03/30/%E5%9F%BA%E7%A4%8EVue-js-3/","content":"<p>最後一篇 Vue 的基礎，會提到修飾符、還有 v-bind 切換 class，表單的運用，還有 component 的概念。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"修飾符\"><a href=\"#修飾符\" class=\"headerlink\" title=\"修飾符\"></a>修飾符</h2><hr>\n<p>修飾符在網頁中很常使用到，例如點擊一個 a 連結，不想讓他產生作用的話，就會使用到 <code>preventDefault()</code> 這個語法，例如 jQuery 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot;&gt;Click me&lt;&#x2F;a&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  $(&quot;a&quot;).on(&quot;click&quot;, function(e) &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>這樣子點擊的話，連結就不會有作用。</p>\n<p>而在 Vue 中也有這個用法，阻止默認行為：</p>\n<p><code>&lt;button @click.prevent=&quot;doThis&quot;&gt;&lt;/button&gt;</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 當點擊a連結，一樣可以執行function，但不會連到Google --&gt;</span><br><span class=\"line\">  &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.com&quot; @click.prevent&#x3D;&quot;reverseText&quot;&gt;Reverse Text&lt;&#x2F;a&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;newText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;,</span><br><span class=\"line\">    \tnewText: &quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    \treverseText: function() &#123;</span><br><span class=\"line\">    \t  this.newText &#x3D; this.text.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"透過-v-bind-class-來綁定-HTML\"><a href=\"#透過-v-bind-class-來綁定-HTML\" class=\"headerlink\" title=\"透過 v-bind:class 來綁定 HTML\"></a>透過 v-bind:class 來綁定 HTML</h2><hr>\n<p>可以給予 <code>v-bind:class</code> 一個 class 對象，去做出動態切換 class</p>\n<p><code>&lt;div v-bind:class=&quot;{ class名稱: 切換的動作 }&quot;&gt;&lt;/div&gt;</code></p>\n<p>看以下範例，有一個藍色的方塊，只要在 class 名稱加上 yellow，就會變成黃色：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 只要在class動態加上yellow就會變黃色 --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    height: 250px;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  .box.yellow &#123;</span><br><span class=\"line\">    background-color: yellow;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tchange: false  &#x2F;&#x2F; 這邊有一個切換動作change的data</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;!-- 加上 v-bind:class&#x3D;&quot;&#123;class名稱: 切換的動作&#125;&quot; --&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;box&quot; :class&#x3D;&quot;&#123;&#39;yellow&#39;: change&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 在按鈕綁定click，讓它去做切換的效果 --&gt;</span><br><span class=\"line\">  &lt;button class&#x3D;&quot;changeColor btn btn-primary&quot; @click&#x3D;&quot;change &#x3D; !change&quot;&gt;Change Color&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<iframe src=\"https://codepen.io/bucky0112/embed/dyoJaow?height=265&theme-id=dark&default-tab=html,result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"計算屬性-computed-的使用\"><a href=\"#計算屬性-computed-的使用\" class=\"headerlink\" title=\"計算屬性 computed 的使用\"></a>計算屬性 computed 的使用</h2><hr>\n<p>下面的範例是當在 <code>text</code> 欄位輸入文字時，會在 <code>.showText</code> 顯示反轉文字</p>\n<p>不過</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;text.split(&quot;&quot;).reverse().join(&quot;&quot;)&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \ttext: &quot;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>但是如果要重複使用 <code>{{text.split(\"\").reverse().join(\"\")}}</code> 這一段的話，會有點難維護，所以可以運用 computed 來處理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    text: &quot;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    reverseText: function() &#123;  &#x2F;&#x2F; 在 computed 中要使用 function</span><br><span class=\"line\">    \treturn this.text.split(&quot;&quot;).reverse().join(&quot;&quot;); &#x2F;&#x2F; 並且會回傳值，所以就可以應用在回傳反轉後的結果</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接著只要加上回傳值的 function，就可以顯示結果了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;直接輸入文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control mt-3&quot; v-model&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;在下方顯示反轉文字&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;h3 class&#x3D;&quot;showText&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;reverseText&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那麼 computed 跟 methods 在使用上有什麼差異呢？</p>\n<ul>\n<li>computed 一般用來回傳用於畫面呈現的資料 <strong>在監控資料更動後，重新運算後將結果呈現於畫面上。由於資料變動就會觸發，所以如果運行的資料太多，在效能處理上就會變慢。</strong></li>\n<li>methods 是運用在互動的函式，可以用來修改資料，內容因為需要觸發才會運作，所以如果資料量大的話會建議使用 methods。</li>\n</ul>\n<h2 id=\"Vue-表單與資料的綁定\"><a href=\"#Vue-表單與資料的綁定\" class=\"headerlink\" title=\"Vue 表單與資料的綁定\"></a>Vue 表單與資料的綁定</h2><hr>\n<p>前面有提到 Vue 雙向綁定用 <code>v-model</code> 的用法，這個部份來看看其他綁定的用法。</p>\n<h3 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;label for&#x3D;&quot;dinner&quot;&gt;要吃晚餐嗎？&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checkboxDinner&quot; id&#x3D;&quot;dinner&quot;&gt;</span><br><span class=\"line\">      &#123;&#123;checkboxDinner&#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  \tel: &quot;#app&quot;,</span><br><span class=\"line\">  \tdata: &#123;</span><br><span class=\"line\">  \t  checkboxDinner: false, &#x2F;&#x2F; checkbox 選項只有true或false</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 的用法這邊用在是或不是的選項 ，這邊預設是 false，當點擊時就會變成 true。</p>\n<p>還有加入 Array 的用法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    checkboxArray: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>這裏有綁定 3 個選項，當點擊 <code>checkbox</code> ，data 的 checkboxArray 空陣列就會填入該選項的 value，最後會顯示在 <code>&lt;span&gt;</code> 中的 <code>v-for</code> 迴圈。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">      &lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;check4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;checkboxArray&quot;&gt;</span><br><span class=\"line\">      &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;check4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;p&gt;晚餐火鍋裡有&lt;span v-for&#x3D;&quot;item in checkboxArray&quot;&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;span&gt;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>checkbox</code> 還可以另一種的運用，就是只顯示單選，例如當選擇一個選項就會將 value 綁入 singleRadio 的空字串中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    singleRadio: &quot;&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio2&quot; value&#x3D;&quot;雞&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio2&quot;&gt;雞&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio3&quot; value&#x3D;&quot;豬&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio3&quot;&gt;豬&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;form-check&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;radio&quot; class&#x3D;&quot;form-check-input&quot; id&#x3D;&quot;radio4&quot; value&#x3D;&quot;牛&quot; v-model&#x3D;&quot;singleRadio&quot;&gt;</span><br><span class=\"line\">    &lt;label class&#x3D;&quot;form-check-label&quot; for&#x3D;&quot;radio4&quot;&gt;牛&lt;&#x2F;label&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;p&gt;晚餐火鍋裡有 &#123;&#123;singleRadio&#125;&#125;。&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下拉式的選單\"><a href=\"#下拉式的選單\" class=\"headerlink\" title=\"下拉式的選單\"></a>下拉式的選單</h3><p>當選擇某一個選項時，會將 value 綁入 data 的 selected 空字串中，然後顯示在 <code></code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;h2&gt;喜歡澳洲哪一個城市？&lt;&#x2F;h2&gt;</span><br><span class=\"line\">  &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; class&#x3D;&quot;form-control&quot; v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;&quot; disabled&gt;-- 請選擇地點 --&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Melbourne&quot;&gt;墨爾本&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Sydney&quot;&gt;雪梨&lt;&#x2F;option&gt;</span><br><span class=\"line\">    &lt;option value&#x3D;&quot;Adelaide&quot;&gt;阿德雷德&lt;&#x2F;option&gt;</span><br><span class=\"line\">  &lt;&#x2F;select&gt;</span><br><span class=\"line\">  &#123;&#123;selected&#125;&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app &#x3D; new Vue (&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tselected: &quot;&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"component-元件基礎概念\"><a href=\"#component-元件基礎概念\" class=\"headerlink\" title=\"component 元件基礎概念\"></a>component 元件基礎概念</h2><hr>\n<p>以下有一個範例，當點擊按鈕時，透過 <code>v-on:click</code> 綁定 counter 的按鈕會 + 1：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 當點擊按鈕時，透過 v-on:click綁定counter的按鈕會+1 --&gt;</span><br><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &quot;#app&quot;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">    \tcounter: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果新增另一個按鈕的話，會怎麼樣呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>因為兩個是共用同一個變數 counter，所以當按其中一個按鈕，兩個會一起 + 1。</p>\n<p>那麼如果想要讓個別按鈕資料獨立的話，這邊有另一個方法可以使用：</p>\n<p><strong>component 元件</strong>，透過這樣的方式，可以讓每個 component 中的 data 都會是互相獨立，看以下範例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Vue.component(tagName, options)</span><br><span class=\"line\">Vue.component(&#39;counter-component&#39;, &#123;</span><br><span class=\"line\">  template: &#96;&lt;div&gt;</span><br><span class=\"line\">    C目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;&#96;,</span><br><span class=\"line\">  data: function() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      counter: 0 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">let app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &quot;#app&quot;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    counter: 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>tagName 可以取任意的名字，但是要注意必須是小寫，如果是多組字，就要使用 kebab Case 來命名。</p>\n<p>option 裡面有 template 跟 data，template 是要顯示在頁面上的樣板，注意要用 `` 包起來，data 在這邊則是 function 並 return 值。</p>\n<p>這樣點擊的數量就會是單獨計算，就算再新增一個 component 也一樣會分開計算。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    A目前點擊&lt;button @click&#x3D;&quot;counter +&#x3D; 1&quot;&gt;&#123;&#123;counter&#125;&#125;&lt;&#x2F;button&gt;下</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;!-- 兩者所點擊的數量是分開計算 --&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">  &lt;counter-component&gt;&lt;&#x2F;counter-component&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["javascript","vue"]},{"title":"練習如何解題","url":"/bucky0112.github.io/2020/04/18/%E7%B7%B4%E7%BF%92%E5%A6%82%E4%BD%95%E8%A7%A3%E9%A1%8C/","content":"<p>在上一篇的 <a href=\"https://bucky0112.github.io/bucky0112.github.io/2020/04/03/%E5%85%88%E5%88%A5%E6%80%A5%E8%91%97%E5%AF%ABleetcode%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/\">Think first, code later</a> 中，有提到如何一步一步地解開印出 1-100 的偶數，這一篇則是來看看如何解一些題目，像是印出 1-100 的奇數、fizz buzz 跟找出最小值。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"印出-1-100-的奇數\"><a href=\"#印出-1-100-的奇數\" class=\"headerlink\" title=\"印出 1-100 的奇數\"></a>印出 1-100 的奇數</h2><hr>\n<p>首先先想出步驟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">設定 i &#x3D; 1</span><br><span class=\"line\">如果 i &gt; 100 就結束</span><br><span class=\"line\">如果 i 是奇數就印出 i</span><br><span class=\"line\">讓 i 累加</span><br><span class=\"line\">再跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>大概設定步驟後，就可以寫出 pseudo code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let i &#x3D; 1</span><br><span class=\"line\">i &gt; 100 end</span><br><span class=\"line\">i % 2 &#x3D;&#x3D;&#x3D; 1</span><br><span class=\"line\">i ++</span><br><span class=\"line\">jump to line 2</span><br></pre></td></tr></table></figure>\n\n<p>寫到這邊就大概知道可以使用 for 迴圈去跑了，所以可以寫成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (let i &#x3D; 1; i &lt; 100; i++ ) &#123;</span><br><span class=\"line\">  if (i % 2 &#x3D;&#x3D;&#x3D;1) &#123;</span><br><span class=\"line\">    console.log(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fizz-buzz\"><a href=\"#Fizz-buzz\" class=\"headerlink\" title=\"Fizz buzz\"></a>Fizz buzz</h2><hr>\n<p>記得這題在 leetcode 有看過，那時候還不是很懂如何思考（雖然現在也沒有很強就是了），不過現在可以來試試看如何解出這一題，首先先了解一下規則。</p>\n<p>Fizz buzz 的規則是，數字從 1-n，如果碰到 3 的倍數，就印出 Fizz；如果碰到 5 的倍數，就印出 Buzz；如果碰到 3 跟 5 的倍數，就印出 Fizz Buzz。</p>\n<p>知道規則後，就可以想想怎麼做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">設定 i &#x3D; 1</span><br><span class=\"line\">一直算到 n 就結束</span><br><span class=\"line\">如果是 3 的倍數，印 Fizz</span><br><span class=\"line\">如果是 5 的倍數，印 Buzz</span><br><span class=\"line\">如果是 3 跟 5 的倍數，印 Fizz Buzz</span><br><span class=\"line\">讓 i 累加</span><br><span class=\"line\">跳回第 2 步</span><br></pre></td></tr></table></figure>\n\n<p>到這邊就可以用 function 包一個 for 迴圈寫出來，看數字要多少再帶入就可以：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function fizzBuzz (num) &#123;</span><br><span class=\"line\">  for (let i &#x3D;1; i &lt;&#x3D; num; i++) &#123;</span><br><span class=\"line\">    if(i % 15 &#x3D;&#x3D;&#x3D;0) &#123;            &#x2F;&#x2F; 15 的倍數就印 Fizz Buzz</span><br><span class=\"line\">      console.log(&#39;Fizz Buzz&#39;)</span><br><span class=\"line\">    &#125; else if (i % 3 &#x3D;&#x3D;&#x3D;0) &#123;    &#x2F;&#x2F; 3 的倍數就印 Fizz</span><br><span class=\"line\">      console.log(&#39;Fizz&#39;)</span><br><span class=\"line\">    &#125; else if (i % 5 &#x3D;&#x3D;&#x3D;0) &#123;    &#x2F;&#x2F; 5 的倍數就印 Buzz</span><br><span class=\"line\">      console.log(&#39;Buzz&#39;)</span><br><span class=\"line\">    &#125; else &#123;                    &#x2F;&#x2F; 其他數就照樣印出數字</span><br><span class=\"line\">      console.log(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fizzBuzz(100)                  &#x2F;&#x2F; 代入 100，就從 1 比對到 100</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"找最小值\"><a href=\"#找最小值\" class=\"headerlink\" title=\"找最小值\"></a>找最小值</h2><hr>\n<p>找最小值的方法可以從情境去帶入比較好思考。</p>\n<p>例如目前有一副牌，從第一張開始設定為最小的牌，再來每一次的翻牌跟目前最小的牌做比較，直到全部翻完就可以知道最小的牌是哪一張。</p>\n<p>所以 pseudo code 大概是這樣：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let min &#x3D; [0];</span><br><span class=\"line\">for (i form 1 to n) do</span><br><span class=\"line\">  翻開第 i 張牌</span><br><span class=\"line\">  if (第 i 張牌比最小牌還要小)</span><br><span class=\"line\">    最小的牌 &#x3D; 第 i 張牌</span><br><span class=\"line\">  end if</span><br><span class=\"line\">end for</span><br></pre></td></tr></table></figure>\n\n<p>接著就可以用 JavaScript 寫出 code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let num &#x3D; [11, 10, 8, 3, 2, 6];          &#x2F;&#x2F; 目前的牌組</span><br><span class=\"line\">let min &#x3D; num[0];                       &#x2F;&#x2F; 設定最小牌為第一張</span><br><span class=\"line\"></span><br><span class=\"line\">for (let i &#x3D; 0; i &lt; num.length; i ++) &#123;</span><br><span class=\"line\">  if (num[i] &lt; min) &#123;                   &#x2F;&#x2F; 如果目前翻到的牌 &lt; min，</span><br><span class=\"line\">    min &#x3D; num[i]                        &#x2F;&#x2F; min就是目前最小牌</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(min)                        &#x2F;&#x2F; 最小值就是 2</span><br></pre></td></tr></table></figure>","categories":["先別急著寫 leetcode 課程心得"],"tags":["印出 1-100 的奇數","fizz buzz","找最小值"]}]